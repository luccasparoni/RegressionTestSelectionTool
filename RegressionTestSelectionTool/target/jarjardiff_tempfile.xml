<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE differences SYSTEM "http://depfind.sourceforge.net/dtd/differences.dtd">

<differences>
    <name></name>
    <old>Initial</old>
    <new>Modified</new>
    <removed-classes>
        <name visibility="public" super="yes" name="org.joda.time.TestParseISO" extends="junit.framework.TestCase" implements="">org.joda.time.TestParseISO</name>
        <name visibility="public" super="yes" name="org.joda.time.TestParseISO$DMatcher" extends="org.joda.time.TestParseISO$Matcher" implements="">org.joda.time.TestParseISO$DMatcher</name>
        <name visibility="public" super="yes" name="org.joda.time.TestParseISO$DTMatcher" extends="org.joda.time.TestParseISO$Matcher" implements="">org.joda.time.TestParseISO$DTMatcher</name>
        <name visibility="public" super="yes" name="org.joda.time.TestParseISO$Matcher" abstract="yes" extends="junit.framework.Assert" implements="">org.joda.time.TestParseISO$Matcher</name>
        <name visibility="public" super="yes" name="org.joda.time.TestParseISO$TMatcher" extends="org.joda.time.TestParseISO$Matcher" implements="">org.joda.time.TestParseISO$TMatcher</name>
        <name visibility="package" super="yes" name="org.joda.time.TestSerialization$MockDelegatedDurationField" extends="org.joda.time.field.DelegatedDurationField" implements="java.io.Serializable">org.joda.time.TestSerialization$MockDelegatedDurationField</name>
    </removed-classes>
    <deprecated-classes>
        <name visibility="public" final="yes" super="yes" deprecated="yes" name="org.joda.time.DateMidnight" extends="org.joda.time.base.BaseDateTime" implements="org.joda.time.ReadableDateTime, java.io.Serializable">org.joda.time.DateMidnight</name>
    </deprecated-classes>
    <modified-interfaces>
        <class>
            <name>org.joda.time.ReadablePartial</name>
            <modified-declaration>
                <old-declaration visibility="public" name="org.joda.time.ReadablePartial" interface="yes" extends="">public interface org.joda.time.ReadablePartial</old-declaration>
                <new-declaration visibility="public" name="org.joda.time.ReadablePartial" interface="yes" extends="java.lang.Comparable">public interface org.joda.time.ReadablePartial extends java.lang.Comparable</new-declaration>
            </modified-declaration>
        </class>
    </modified-interfaces>
    <modified-classes>
        <class>
            <name>org.joda.time.DateMidnight</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.DateMidnight" signature="now()" full-signature="org.joda.time.DateMidnight.now()" throws="">public static org.joda.time.DateMidnight now()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.DateMidnight" signature="now(org.joda.time.Chronology)" full-signature="org.joda.time.DateMidnight.now(org.joda.time.Chronology)" throws="">public static org.joda.time.DateMidnight now(org.joda.time.Chronology)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.DateMidnight" signature="now(org.joda.time.DateTimeZone)" full-signature="org.joda.time.DateMidnight.now(org.joda.time.DateTimeZone)" throws="">public static org.joda.time.DateMidnight now(org.joda.time.DateTimeZone)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.DateMidnight" signature="parse(java.lang.String)" full-signature="org.joda.time.DateMidnight.parse(java.lang.String)" throws="">public static org.joda.time.DateMidnight parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.DateMidnight" signature="parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" full-signature="org.joda.time.DateMidnight.parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" throws="">public static org.joda.time.DateMidnight parse(java.lang.String, org.joda.time.format.DateTimeFormatter)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.DateTime</name>
            <deprecated-methods>
                <declaration visibility="public" deprecated="yes" return-type="org.joda.time.DateMidnight" signature="toDateMidnight()" full-signature="org.joda.time.DateTime.toDateMidnight()" throws="">public org.joda.time.DateMidnight toDateMidnight()</declaration>
            </deprecated-methods>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.DateTime" signature="now()" full-signature="org.joda.time.DateTime.now()" throws="">public static org.joda.time.DateTime now()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.DateTime" signature="now(org.joda.time.Chronology)" full-signature="org.joda.time.DateTime.now(org.joda.time.Chronology)" throws="">public static org.joda.time.DateTime now(org.joda.time.Chronology)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.DateTime" signature="now(org.joda.time.DateTimeZone)" full-signature="org.joda.time.DateTime.now(org.joda.time.DateTimeZone)" throws="">public static org.joda.time.DateTime now(org.joda.time.DateTimeZone)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.DateTime" signature="parse(java.lang.String)" full-signature="org.joda.time.DateTime.parse(java.lang.String)" throws="">public static org.joda.time.DateTime parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.DateTime" signature="parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" full-signature="org.joda.time.DateTime.parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" throws="">public static org.joda.time.DateTime parse(java.lang.String, org.joda.time.format.DateTimeFormatter)</declaration>
                <declaration visibility="public" return-type="org.joda.time.DateTime" signature="withEarlierOffsetAtOverlap()" full-signature="org.joda.time.DateTime.withEarlierOffsetAtOverlap()" throws="">public org.joda.time.DateTime withEarlierOffsetAtOverlap()</declaration>
                <declaration visibility="public" return-type="org.joda.time.DateTime" signature="withLaterOffsetAtOverlap()" full-signature="org.joda.time.DateTime.withLaterOffsetAtOverlap()" throws="">public org.joda.time.DateTime withLaterOffsetAtOverlap()</declaration>
                <declaration visibility="public" return-type="org.joda.time.DateTime" signature="withTimeAtStartOfDay()" full-signature="org.joda.time.DateTime.withTimeAtStartOfDay()" throws="">public org.joda.time.DateTime withTimeAtStartOfDay()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.DateTime$Property</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.DateTime$Property.withMaximumValue()</name>
                    <modified-code visibility="public" return-type="org.joda.time.DateTime" signature="withMaximumValue()" full-signature="org.joda.time.DateTime$Property.withMaximumValue()" throws="">public org.joda.time.DateTime withMaximumValue()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.DateTime$Property.withMinimumValue()</name>
                    <modified-code visibility="public" return-type="org.joda.time.DateTime" signature="withMinimumValue()" full-signature="org.joda.time.DateTime$Property.withMinimumValue()" throws="">public org.joda.time.DateTime withMinimumValue()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.DateTimeFieldType$StandardDateTimeFieldType</name>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</declaration>
                <declaration visibility="public" return-type="int" signature="hashCode()" full-signature="org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode()" throws="">public int hashCode()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.DateTimeUtils</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.DateTimeUtils.isContiguous(org.joda.time.ReadablePartial)</name>
                    <modified-code visibility="public" static="yes" final="yes" return-type="boolean" signature="isContiguous(org.joda.time.ReadablePartial)" full-signature="org.joda.time.DateTimeUtils.isContiguous(org.joda.time.ReadablePartial)" throws="">public static final boolean isContiguous(org.joda.time.ReadablePartial)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.DateTimeUtils.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.DateTimeUtils.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" static="yes" volatile="yes" type="java.util.Map" name="cZoneNames" signature="cZoneNames" full-signature="org.joda.time.DateTimeUtils.cZoneNames">private static volatile java.util.Map cZoneNames</declaration>
            </new-fields>
            <new-methods>
                <declaration visibility="public" static="yes" final="yes" return-type="long" signature="fromJulianDay(double)" full-signature="org.joda.time.DateTimeUtils.fromJulianDay(double)" throws="">public static final long fromJulianDay(double)</declaration>
                <declaration visibility="public" static="yes" final="yes" return-type="java.util.Map" signature="getDefaultTimeZoneNames()" full-signature="org.joda.time.DateTimeUtils.getDefaultTimeZoneNames()" throws="">public static final java.util.Map getDefaultTimeZoneNames()</declaration>
                <declaration visibility="private" static="yes" return-type="void" signature="put(java.util.Map, java.lang.String, java.lang.String)" full-signature="org.joda.time.DateTimeUtils.put(java.util.Map, java.lang.String, java.lang.String)" throws="">private static void put(java.util.Map, java.lang.String, java.lang.String)</declaration>
                <declaration visibility="public" static="yes" final="yes" return-type="void" signature="setDefaultTimeZoneNames(java.util.Map)" full-signature="org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(java.util.Map)" throws="">public static final void setDefaultTimeZoneNames(java.util.Map)</declaration>
                <declaration visibility="public" static="yes" final="yes" return-type="double" signature="toJulianDay(long)" full-signature="org.joda.time.DateTimeUtils.toJulianDay(long)" throws="">public static final double toJulianDay(long)</declaration>
                <declaration visibility="public" static="yes" final="yes" return-type="long" signature="toJulianDayNumber(long)" full-signature="org.joda.time.DateTimeUtils.toJulianDayNumber(long)" throws="">public static final long toJulianDayNumber(long)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.DateTimeZone</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.DateTimeZone.convertLocalToUTC(long, boolean)</name>
                    <modified-code visibility="public" return-type="long" signature="convertLocalToUTC(long, boolean)" full-signature="org.joda.time.DateTimeZone.convertLocalToUTC(long, boolean)" throws="">public long convertLocalToUTC(long, boolean)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.DateTimeZone.forOffsetHoursMinutes(int, int)</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.DateTimeZone" signature="forOffsetHoursMinutes(int, int)" full-signature="org.joda.time.DateTimeZone.forOffsetHoursMinutes(int, int)" throws="java.lang.IllegalArgumentException">public static org.joda.time.DateTimeZone forOffsetHoursMinutes(int, int) throws java.lang.IllegalArgumentException</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.DateTimeZone.forOffsetMillis(int)</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.DateTimeZone" signature="forOffsetMillis(int)" full-signature="org.joda.time.DateTimeZone.forOffsetMillis(int)" throws="">public static org.joda.time.DateTimeZone forOffsetMillis(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone)</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.DateTimeZone" signature="forTimeZone(java.util.TimeZone)" full-signature="org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone)" throws="">public static org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.DateTimeZone.getConvertedId(java.lang.String)</name>
                    <modified-code visibility="private" static="yes" synchronized="yes" return-type="java.lang.String" signature="getConvertedId(java.lang.String)" full-signature="org.joda.time.DateTimeZone.getConvertedId(java.lang.String)" throws="">private static synchronized java.lang.String getConvertedId(java.lang.String)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.DateTimeZone.getDefaultNameProvider()</name>
                    <modified-code visibility="private" static="yes" return-type="org.joda.time.tz.NameProvider" signature="getDefaultNameProvider()" full-signature="org.joda.time.DateTimeZone.getDefaultNameProvider()" throws="">private static org.joda.time.tz.NameProvider getDefaultNameProvider()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.DateTimeZone.getDefaultProvider()</name>
                    <modified-code visibility="private" static="yes" return-type="org.joda.time.tz.Provider" signature="getDefaultProvider()" full-signature="org.joda.time.DateTimeZone.getDefaultProvider()" throws="">private static org.joda.time.tz.Provider getDefaultProvider()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.DateTimeZone.getMillisKeepLocal(org.joda.time.DateTimeZone, long)</name>
                    <modified-code visibility="public" return-type="long" signature="getMillisKeepLocal(org.joda.time.DateTimeZone, long)" full-signature="org.joda.time.DateTimeZone.getMillisKeepLocal(org.joda.time.DateTimeZone, long)" throws="">public long getMillisKeepLocal(org.joda.time.DateTimeZone, long)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.DateTimeZone.getOffsetFromLocal(long)</name>
                    <modified-code visibility="public" return-type="int" signature="getOffsetFromLocal(long)" full-signature="org.joda.time.DateTimeZone.getOffsetFromLocal(long)" throws="">public int getOffsetFromLocal(long)</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="int" name="MAX_MILLIS" signature="MAX_MILLIS" full-signature="org.joda.time.DateTimeZone.MAX_MILLIS" value="86399999">private static final int MAX_MILLIS</declaration>
            </new-fields>
            <new-methods>
                <declaration visibility="public" return-type="long" signature="adjustOffset(long, boolean)" full-signature="org.joda.time.DateTimeZone.adjustOffset(long, boolean)" throws="">public long adjustOffset(long, boolean)</declaration>
                <declaration visibility="public" return-type="long" signature="convertLocalToUTC(long, boolean, long)" full-signature="org.joda.time.DateTimeZone.convertLocalToUTC(long, boolean, long)" throws="">public long convertLocalToUTC(long, boolean, long)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.DateTimeZone$1</name>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="serialVersionUID" signature="serialVersionUID" full-signature="org.joda.time.DateTimeZone$1.serialVersionUID" value="-3128740902654445468">private static final long serialVersionUID</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.Duration</name>
            <new-methods>
                <declaration visibility="public" return-type="org.joda.time.Duration" signature="dividedBy(long)" full-signature="org.joda.time.Duration.dividedBy(long)" throws="">public org.joda.time.Duration dividedBy(long)</declaration>
                <declaration visibility="public" return-type="org.joda.time.Duration" signature="multipliedBy(long)" full-signature="org.joda.time.Duration.multipliedBy(long)" throws="">public org.joda.time.Duration multipliedBy(long)</declaration>
                <declaration visibility="public" return-type="org.joda.time.Duration" signature="negated()" full-signature="org.joda.time.Duration.negated()" throws="">public org.joda.time.Duration negated()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.Duration" signature="parse(java.lang.String)" full-signature="org.joda.time.Duration.parse(java.lang.String)" throws="">public static org.joda.time.Duration parse(java.lang.String)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.DurationFieldType$StandardDurationFieldType</name>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.DurationFieldType$StandardDurationFieldType.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</declaration>
                <declaration visibility="public" return-type="int" signature="hashCode()" full-signature="org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode()" throws="">public int hashCode()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.IllegalFieldValueException</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.IllegalFieldValueException.createMessage(java.lang.String, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.String)</name>
                    <modified-code visibility="private" static="yes" return-type="java.lang.String" signature="createMessage(java.lang.String, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.String)" full-signature="org.joda.time.IllegalFieldValueException.createMessage(java.lang.String, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.String)" throws="">private static java.lang.String createMessage(java.lang.String, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.String)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.Instant</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.Instant" signature="now()" full-signature="org.joda.time.Instant.now()" throws="">public static org.joda.time.Instant now()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.Instant" signature="parse(java.lang.String)" full-signature="org.joda.time.Instant.parse(java.lang.String)" throws="">public static org.joda.time.Instant parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.Instant" signature="parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" full-signature="org.joda.time.Instant.parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" throws="">public static org.joda.time.Instant parse(java.lang.String, org.joda.time.format.DateTimeFormatter)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.Interval</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.Interval" signature="parse(java.lang.String)" full-signature="org.joda.time.Interval.parse(java.lang.String)" throws="">public static org.joda.time.Interval parse(java.lang.String)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.LocalDate</name>
            <deprecated-methods>
                <declaration visibility="public" deprecated="yes" return-type="org.joda.time.DateMidnight" signature="toDateMidnight()" full-signature="org.joda.time.LocalDate.toDateMidnight()" throws="">public org.joda.time.DateMidnight toDateMidnight()</declaration>
                <declaration visibility="public" deprecated="yes" return-type="org.joda.time.DateMidnight" signature="toDateMidnight(org.joda.time.DateTimeZone)" full-signature="org.joda.time.LocalDate.toDateMidnight(org.joda.time.DateTimeZone)" throws="">public org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)</declaration>
            </deprecated-methods>
            <modified-fields>
                <feature>
                    <name>org.joda.time.LocalDate.iChronology</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.LocalDate.iChronology">private org.joda.time.Chronology iChronology</old-declaration>
                        <new-declaration visibility="private" final="yes" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.LocalDate.iChronology">private final org.joda.time.Chronology iChronology</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>org.joda.time.LocalDate.iHash</name>
                    <modified-declaration>
                        <old-declaration visibility="private" volatile="yes" transient="yes" type="int" name="iHash" signature="iHash" full-signature="org.joda.time.LocalDate.iHash">private volatile transient int iHash</old-declaration>
                        <new-declaration visibility="private" transient="yes" type="int" name="iHash" signature="iHash" full-signature="org.joda.time.LocalDate.iHash">private transient int iHash</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>org.joda.time.LocalDate.iLocalMillis</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="long" name="iLocalMillis" signature="iLocalMillis" full-signature="org.joda.time.LocalDate.iLocalMillis">private long iLocalMillis</old-declaration>
                        <new-declaration visibility="private" final="yes" type="long" name="iLocalMillis" signature="iLocalMillis" full-signature="org.joda.time.LocalDate.iLocalMillis">private final long iLocalMillis</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.LocalDate.fromCalendarFields(java.util.Calendar)</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.LocalDate" signature="fromCalendarFields(java.util.Calendar)" full-signature="org.joda.time.LocalDate.fromCalendarFields(java.util.Calendar)" throws="">public static org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.LocalDate.fromDateFields(java.util.Date)</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.LocalDate" signature="fromDateFields(java.util.Date)" full-signature="org.joda.time.LocalDate.fromDateFields(java.util.Date)" throws="">public static org.joda.time.LocalDate fromDateFields(java.util.Date)</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalDate" signature="now()" full-signature="org.joda.time.LocalDate.now()" throws="">public static org.joda.time.LocalDate now()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalDate" signature="now(org.joda.time.Chronology)" full-signature="org.joda.time.LocalDate.now(org.joda.time.Chronology)" throws="">public static org.joda.time.LocalDate now(org.joda.time.Chronology)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalDate" signature="now(org.joda.time.DateTimeZone)" full-signature="org.joda.time.LocalDate.now(org.joda.time.DateTimeZone)" throws="">public static org.joda.time.LocalDate now(org.joda.time.DateTimeZone)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalDate" signature="parse(java.lang.String)" full-signature="org.joda.time.LocalDate.parse(java.lang.String)" throws="">public static org.joda.time.LocalDate parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalDate" signature="parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" full-signature="org.joda.time.LocalDate.parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" throws="">public static org.joda.time.LocalDate parse(java.lang.String, org.joda.time.format.DateTimeFormatter)</declaration>
                <declaration visibility="private" return-type="java.lang.Object" signature="readResolve()" full-signature="org.joda.time.LocalDate.readResolve()" throws="">private java.lang.Object readResolve()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.LocalDateTime</name>
            <modified-fields>
                <feature>
                    <name>org.joda.time.LocalDateTime.iChronology</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.LocalDateTime.iChronology">private org.joda.time.Chronology iChronology</old-declaration>
                        <new-declaration visibility="private" final="yes" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.LocalDateTime.iChronology">private final org.joda.time.Chronology iChronology</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>org.joda.time.LocalDateTime.iLocalMillis</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="long" name="iLocalMillis" signature="iLocalMillis" full-signature="org.joda.time.LocalDateTime.iLocalMillis">private long iLocalMillis</old-declaration>
                        <new-declaration visibility="private" final="yes" type="long" name="iLocalMillis" signature="iLocalMillis" full-signature="org.joda.time.LocalDateTime.iLocalMillis">private final long iLocalMillis</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.LocalDateTime.fromCalendarFields(java.util.Calendar)</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.LocalDateTime" signature="fromCalendarFields(java.util.Calendar)" full-signature="org.joda.time.LocalDateTime.fromCalendarFields(java.util.Calendar)" throws="">public static org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.LocalDateTime.fromDateFields(java.util.Date)</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.LocalDateTime" signature="fromDateFields(java.util.Date)" full-signature="org.joda.time.LocalDateTime.fromDateFields(java.util.Date)" throws="">public static org.joda.time.LocalDateTime fromDateFields(java.util.Date)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.LocalDateTime.toDate()</name>
                    <modified-code visibility="public" return-type="java.util.Date" signature="toDate()" full-signature="org.joda.time.LocalDateTime.toDate()" throws="">public java.util.Date toDate()</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="private" return-type="java.util.Date" signature="correctDstTransition(java.util.Date, java.util.TimeZone)" full-signature="org.joda.time.LocalDateTime.correctDstTransition(java.util.Date, java.util.TimeZone)" throws="">private java.util.Date correctDstTransition(java.util.Date, java.util.TimeZone)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalDateTime" signature="now()" full-signature="org.joda.time.LocalDateTime.now()" throws="">public static org.joda.time.LocalDateTime now()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalDateTime" signature="now(org.joda.time.Chronology)" full-signature="org.joda.time.LocalDateTime.now(org.joda.time.Chronology)" throws="">public static org.joda.time.LocalDateTime now(org.joda.time.Chronology)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalDateTime" signature="now(org.joda.time.DateTimeZone)" full-signature="org.joda.time.LocalDateTime.now(org.joda.time.DateTimeZone)" throws="">public static org.joda.time.LocalDateTime now(org.joda.time.DateTimeZone)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalDateTime" signature="parse(java.lang.String)" full-signature="org.joda.time.LocalDateTime.parse(java.lang.String)" throws="">public static org.joda.time.LocalDateTime parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalDateTime" signature="parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" full-signature="org.joda.time.LocalDateTime.parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" throws="">public static org.joda.time.LocalDateTime parse(java.lang.String, org.joda.time.format.DateTimeFormatter)</declaration>
                <declaration visibility="private" return-type="java.lang.Object" signature="readResolve()" full-signature="org.joda.time.LocalDateTime.readResolve()" throws="">private java.lang.Object readResolve()</declaration>
                <declaration visibility="public" return-type="java.util.Date" signature="toDate(java.util.TimeZone)" full-signature="org.joda.time.LocalDateTime.toDate(java.util.TimeZone)" throws="">public java.util.Date toDate(java.util.TimeZone)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.LocalTime</name>
            <modified-fields>
                <feature>
                    <name>org.joda.time.LocalTime.iChronology</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.LocalTime.iChronology">private org.joda.time.Chronology iChronology</old-declaration>
                        <new-declaration visibility="private" final="yes" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.LocalTime.iChronology">private final org.joda.time.Chronology iChronology</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>org.joda.time.LocalTime.iLocalMillis</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="long" name="iLocalMillis" signature="iLocalMillis" full-signature="org.joda.time.LocalTime.iLocalMillis">private long iLocalMillis</old-declaration>
                        <new-declaration visibility="private" final="yes" type="long" name="iLocalMillis" signature="iLocalMillis" full-signature="org.joda.time.LocalTime.iLocalMillis">private final long iLocalMillis</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalTime" signature="now()" full-signature="org.joda.time.LocalTime.now()" throws="">public static org.joda.time.LocalTime now()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalTime" signature="now(org.joda.time.Chronology)" full-signature="org.joda.time.LocalTime.now(org.joda.time.Chronology)" throws="">public static org.joda.time.LocalTime now(org.joda.time.Chronology)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalTime" signature="now(org.joda.time.DateTimeZone)" full-signature="org.joda.time.LocalTime.now(org.joda.time.DateTimeZone)" throws="">public static org.joda.time.LocalTime now(org.joda.time.DateTimeZone)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalTime" signature="parse(java.lang.String)" full-signature="org.joda.time.LocalTime.parse(java.lang.String)" throws="">public static org.joda.time.LocalTime parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.LocalTime" signature="parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" full-signature="org.joda.time.LocalTime.parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" throws="">public static org.joda.time.LocalTime parse(java.lang.String, org.joda.time.format.DateTimeFormatter)</declaration>
                <declaration visibility="private" return-type="java.lang.Object" signature="readResolve()" full-signature="org.joda.time.LocalTime.readResolve()" throws="">private java.lang.Object readResolve()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.MockPartial</name>
            <new-methods>
                <declaration visibility="public" synthetic="yes" return-type="int" signature="compareTo(java.lang.Object)" full-signature="org.joda.time.MockPartial.compareTo(java.lang.Object)" throws="">public int compareTo(java.lang.Object)</declaration>
                <declaration visibility="public" return-type="int" signature="compareTo(org.joda.time.ReadablePartial)" full-signature="org.joda.time.MockPartial.compareTo(org.joda.time.ReadablePartial)" throws="">public int compareTo(org.joda.time.ReadablePartial)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.MockZone</name>
            <removed-constructors>
                <declaration visibility="public" signature="MockZone(long, int)" full-signature="org.joda.time.MockZone.MockZone(long, int)" throws="">public MockZone(long, int)</declaration>
            </removed-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.MockZone.getOffset(long)</name>
                    <modified-code visibility="public" return-type="int" signature="getOffset(long)" full-signature="org.joda.time.MockZone.getOffset(long)" throws="">public int getOffset(long)</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="package" type="int" name="sizeMillis" signature="sizeMillis" full-signature="org.joda.time.MockZone.sizeMillis">int sizeMillis</declaration>
            </new-fields>
            <new-constructors>
                <declaration visibility="public" signature="MockZone(long, int, int)" full-signature="org.joda.time.MockZone.MockZone(long, int, int)" throws="">public MockZone(long, int, int)</declaration>
            </new-constructors>
        </class>
        <class>
            <name>org.joda.time.MonthDay</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.MonthDay.MonthDay(java.lang.Object)</name>
                    <modified-code visibility="public" signature="MonthDay(java.lang.Object)" full-signature="org.joda.time.MonthDay.MonthDay(java.lang.Object)" throws="">public MonthDay(java.lang.Object)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MonthDay.MonthDay(java.lang.Object, org.joda.time.Chronology)</name>
                    <modified-code visibility="public" signature="MonthDay(java.lang.Object, org.joda.time.Chronology)" full-signature="org.joda.time.MonthDay.MonthDay(java.lang.Object, org.joda.time.Chronology)" throws="">public MonthDay(java.lang.Object, org.joda.time.Chronology)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.MonthDay.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.MonthDay.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.format.DateTimeFormatter" name="PARSER" signature="PARSER" full-signature="org.joda.time.MonthDay.PARSER">private static final org.joda.time.format.DateTimeFormatter PARSER</declaration>
            </new-fields>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MonthDay" signature="now()" full-signature="org.joda.time.MonthDay.now()" throws="">public static org.joda.time.MonthDay now()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MonthDay" signature="now(org.joda.time.Chronology)" full-signature="org.joda.time.MonthDay.now(org.joda.time.Chronology)" throws="">public static org.joda.time.MonthDay now(org.joda.time.Chronology)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MonthDay" signature="now(org.joda.time.DateTimeZone)" full-signature="org.joda.time.MonthDay.now(org.joda.time.DateTimeZone)" throws="">public static org.joda.time.MonthDay now(org.joda.time.DateTimeZone)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MonthDay" signature="parse(java.lang.String)" full-signature="org.joda.time.MonthDay.parse(java.lang.String)" throws="">public static org.joda.time.MonthDay parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MonthDay" signature="parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" full-signature="org.joda.time.MonthDay.parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" throws="">public static org.joda.time.MonthDay parse(java.lang.String, org.joda.time.format.DateTimeFormatter)</declaration>
                <declaration visibility="private" return-type="java.lang.Object" signature="readResolve()" full-signature="org.joda.time.MonthDay.readResolve()" throws="">private java.lang.Object readResolve()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.MutableDateTime</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.MutableDateTime.add(org.joda.time.DurationFieldType, int)</name>
                    <modified-code visibility="public" return-type="void" signature="add(org.joda.time.DurationFieldType, int)" full-signature="org.joda.time.MutableDateTime.add(org.joda.time.DurationFieldType, int)" throws="">public void add(org.joda.time.DurationFieldType, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MutableDateTime.addDays(int)</name>
                    <modified-code visibility="public" return-type="void" signature="addDays(int)" full-signature="org.joda.time.MutableDateTime.addDays(int)" throws="">public void addDays(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MutableDateTime.addHours(int)</name>
                    <modified-code visibility="public" return-type="void" signature="addHours(int)" full-signature="org.joda.time.MutableDateTime.addHours(int)" throws="">public void addHours(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MutableDateTime.addMillis(int)</name>
                    <modified-code visibility="public" return-type="void" signature="addMillis(int)" full-signature="org.joda.time.MutableDateTime.addMillis(int)" throws="">public void addMillis(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MutableDateTime.addMinutes(int)</name>
                    <modified-code visibility="public" return-type="void" signature="addMinutes(int)" full-signature="org.joda.time.MutableDateTime.addMinutes(int)" throws="">public void addMinutes(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MutableDateTime.addMonths(int)</name>
                    <modified-code visibility="public" return-type="void" signature="addMonths(int)" full-signature="org.joda.time.MutableDateTime.addMonths(int)" throws="">public void addMonths(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MutableDateTime.addSeconds(int)</name>
                    <modified-code visibility="public" return-type="void" signature="addSeconds(int)" full-signature="org.joda.time.MutableDateTime.addSeconds(int)" throws="">public void addSeconds(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MutableDateTime.addWeeks(int)</name>
                    <modified-code visibility="public" return-type="void" signature="addWeeks(int)" full-signature="org.joda.time.MutableDateTime.addWeeks(int)" throws="">public void addWeeks(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MutableDateTime.addWeekyears(int)</name>
                    <modified-code visibility="public" return-type="void" signature="addWeekyears(int)" full-signature="org.joda.time.MutableDateTime.addWeekyears(int)" throws="">public void addWeekyears(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MutableDateTime.addYears(int)</name>
                    <modified-code visibility="public" return-type="void" signature="addYears(int)" full-signature="org.joda.time.MutableDateTime.addYears(int)" throws="">public void addYears(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.MutableDateTime.setDate(org.joda.time.ReadableInstant)</name>
                    <modified-code visibility="public" return-type="void" signature="setDate(org.joda.time.ReadableInstant)" full-signature="org.joda.time.MutableDateTime.setDate(org.joda.time.ReadableInstant)" throws="">public void setDate(org.joda.time.ReadableInstant)</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MutableDateTime" signature="now()" full-signature="org.joda.time.MutableDateTime.now()" throws="">public static org.joda.time.MutableDateTime now()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MutableDateTime" signature="now(org.joda.time.Chronology)" full-signature="org.joda.time.MutableDateTime.now(org.joda.time.Chronology)" throws="">public static org.joda.time.MutableDateTime now(org.joda.time.Chronology)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MutableDateTime" signature="now(org.joda.time.DateTimeZone)" full-signature="org.joda.time.MutableDateTime.now(org.joda.time.DateTimeZone)" throws="">public static org.joda.time.MutableDateTime now(org.joda.time.DateTimeZone)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MutableDateTime" signature="parse(java.lang.String)" full-signature="org.joda.time.MutableDateTime.parse(java.lang.String)" throws="">public static org.joda.time.MutableDateTime parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MutableDateTime" signature="parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" full-signature="org.joda.time.MutableDateTime.parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" throws="">public static org.joda.time.MutableDateTime parse(java.lang.String, org.joda.time.format.DateTimeFormatter)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.MutableInterval</name>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MutableInterval" signature="parse(java.lang.String)" full-signature="org.joda.time.MutableInterval.parse(java.lang.String)" throws="">public static org.joda.time.MutableInterval parse(java.lang.String)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.MutablePeriod</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.MutablePeriod.MutablePeriod(long)</name>
                    <modified-code visibility="public" signature="MutablePeriod(long)" full-signature="org.joda.time.MutablePeriod.MutablePeriod(long)" throws="">public MutablePeriod(long)</modified-code>
                </feature>
            </modified-constructors>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MutablePeriod" signature="parse(java.lang.String)" full-signature="org.joda.time.MutablePeriod.parse(java.lang.String)" throws="">public static org.joda.time.MutablePeriod parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.MutablePeriod" signature="parse(java.lang.String, org.joda.time.format.PeriodFormatter)" full-signature="org.joda.time.MutablePeriod.parse(java.lang.String, org.joda.time.format.PeriodFormatter)" throws="">public static org.joda.time.MutablePeriod parse(java.lang.String, org.joda.time.format.PeriodFormatter)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.Partial</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.Partial.Partial(org.joda.time.DateTimeFieldType[], int[], org.joda.time.Chronology)</name>
                    <modified-code visibility="public" signature="Partial(org.joda.time.DateTimeFieldType[], int[], org.joda.time.Chronology)" full-signature="org.joda.time.Partial.Partial(org.joda.time.DateTimeFieldType[], int[], org.joda.time.Chronology)" throws="">public Partial(org.joda.time.DateTimeFieldType[], int[], org.joda.time.Chronology)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.Partial.toStringList()</name>
                    <modified-code visibility="public" return-type="java.lang.String" signature="toStringList()" full-signature="org.joda.time.Partial.toStringList()" throws="">public java.lang.String toStringList()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.Partial.with(org.joda.time.DateTimeFieldType, int)</name>
                    <modified-code visibility="public" return-type="org.joda.time.Partial" signature="with(org.joda.time.DateTimeFieldType, int)" full-signature="org.joda.time.Partial.with(org.joda.time.DateTimeFieldType, int)" throws="">public org.joda.time.Partial with(org.joda.time.DateTimeFieldType, int)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.Period</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.Period.Period(long)</name>
                    <modified-code visibility="public" signature="Period(long)" full-signature="org.joda.time.Period.Period(long)" throws="">public Period(long)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.Period.normalizedStandard(org.joda.time.PeriodType)</name>
                    <modified-code visibility="public" return-type="org.joda.time.Period" signature="normalizedStandard(org.joda.time.PeriodType)" full-signature="org.joda.time.Period.normalizedStandard(org.joda.time.PeriodType)" throws="">public org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="org.joda.time.Period" signature="multipliedBy(int)" full-signature="org.joda.time.Period.multipliedBy(int)" throws="">public org.joda.time.Period multipliedBy(int)</declaration>
                <declaration visibility="public" return-type="org.joda.time.Period" signature="negated()" full-signature="org.joda.time.Period.negated()" throws="">public org.joda.time.Period negated()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.Period" signature="parse(java.lang.String)" full-signature="org.joda.time.Period.parse(java.lang.String)" throws="">public static org.joda.time.Period parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.Period" signature="parse(java.lang.String, org.joda.time.format.PeriodFormatter)" full-signature="org.joda.time.Period.parse(java.lang.String, org.joda.time.format.PeriodFormatter)" throws="">public static org.joda.time.Period parse(java.lang.String, org.joda.time.format.PeriodFormatter)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.PeriodType</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.PeriodType.forFields(org.joda.time.DurationFieldType[])</name>
                    <modified-code visibility="public" static="yes" synchronized="yes" return-type="org.joda.time.PeriodType" signature="forFields(org.joda.time.DurationFieldType[])" full-signature="org.joda.time.PeriodType.forFields(org.joda.time.DurationFieldType[])" throws="">public static synchronized org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestAll</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestAll.suite()</name>
                    <modified-code visibility="public" static="yes" return-type="junit.framework.Test" signature="suite()" full-signature="org.joda.time.TestAll.suite()" throws="">public static junit.framework.Test suite()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestAllPackages</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestAllPackages.main(java.lang.String[])</name>
                    <modified-code visibility="public" static="yes" return-type="void" signature="main(java.lang.String[])" full-signature="org.joda.time.TestAllPackages.main(java.lang.String[])" throws="">public static void main(java.lang.String[])</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestDateMidnight_Basics$1</name>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="serialVersionUID" signature="serialVersionUID" full-signature="org.joda.time.TestDateMidnight_Basics$1.serialVersionUID" value="1">private static final long serialVersionUID</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.TestDateMidnight_Constructors</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_formatter()" full-signature="org.joda.time.TestDateMidnight_Constructors.testParse_formatter()" throws="java.lang.Throwable">public void testParse_formatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestDateMidnight_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now()" full-signature="org.joda.time.TestDateMidnight_Constructors.test_now()" throws="java.lang.Throwable">public void test_now() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_Chronology()" full-signature="org.joda.time.TestDateMidnight_Constructors.test_now_Chronology()" throws="java.lang.Throwable">public void test_now_Chronology() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_DateTimeZone()" full-signature="org.joda.time.TestDateMidnight_Constructors.test_now_DateTimeZone()" throws="java.lang.Throwable">public void test_now_DateTimeZone() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_nullChronology()" full-signature="org.joda.time.TestDateMidnight_Constructors.test_now_nullChronology()" throws="java.lang.Throwable">public void test_now_nullChronology() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_nullDateTimeZone()" full-signature="org.joda.time.TestDateMidnight_Constructors.test_now_nullDateTimeZone()" throws="java.lang.Throwable">public void test_now_nullDateTimeZone() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestDateMidnight_Properties</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestDateMidnight_Properties.testPropertyGetCenturyOfEra()</name>
                    <modified-code visibility="public" return-type="void" signature="testPropertyGetCenturyOfEra()" full-signature="org.joda.time.TestDateMidnight_Properties.testPropertyGetCenturyOfEra()" throws="">public void testPropertyGetCenturyOfEra()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateMidnight_Properties.testPropertyGetYearOfEra()</name>
                    <modified-code visibility="public" return-type="void" signature="testPropertyGetYearOfEra()" full-signature="org.joda.time.TestDateMidnight_Properties.testPropertyGetYearOfEra()" throws="">public void testPropertyGetYearOfEra()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestDateTimeUtils</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.DateTimeZone" name="LONDON" signature="LONDON" full-signature="org.joda.time.TestDateTimeUtils.LONDON">private static final org.joda.time.DateTimeZone LONDON</declaration>
            </removed-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestDateTimeUtils.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestDateTimeUtils.static {}" throws="">static {}</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeUtils.testClass()</name>
                    <modified-code visibility="public" return-type="void" signature="testClass()" full-signature="org.joda.time.TestDateTimeUtils.testClass()" throws="">public void testClass()</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="test_julianDay()" full-signature="org.joda.time.TestDateTimeUtils.test_julianDay()" throws="">public void test_julianDay()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestDateTimeUtils$7</name>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="serialVersionUID" signature="serialVersionUID" full-signature="org.joda.time.TestDateTimeUtils$7.serialVersionUID" value="1">private static final long serialVersionUID</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.TestDateTimeZone</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestDateTimeZone.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestDateTimeZone.static {}" throws="">static {}</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZone.testCommentParse()</name>
                    <modified-code visibility="public" return-type="void" signature="testCommentParse()" full-signature="org.joda.time.TestDateTimeZone.testCommentParse()" throws="java.lang.Exception">public void testCommentParse() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int()</name>
                    <modified-code visibility="public" return-type="void" signature="testForOffsetHoursMinutes_int_int()" full-signature="org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int()" throws="">public void testForOffsetHoursMinutes_int_int()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZone.testForOffsetMillis_int()</name>
                    <modified-code visibility="public" return-type="void" signature="testForOffsetMillis_int()" full-signature="org.joda.time.TestDateTimeZone.testForOffsetMillis_int()" throws="">public void testForOffsetMillis_int()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZone.testForTimeZone_TimeZone()</name>
                    <modified-code visibility="public" return-type="void" signature="testForTimeZone_TimeZone()" full-signature="org.joda.time.TestDateTimeZone.testForTimeZone_TimeZone()" throws="">public void testForTimeZone_TimeZone()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZone.testNameProvider()</name>
                    <modified-code visibility="public" return-type="void" signature="testNameProvider()" full-signature="org.joda.time.TestDateTimeZone.testNameProvider()" throws="">public void testNameProvider()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZone.testPatchedNameKeysGazaHistoric()</name>
                    <modified-code visibility="public" return-type="void" signature="testPatchedNameKeysGazaHistoric()" full-signature="org.joda.time.TestDateTimeZone.testPatchedNameKeysGazaHistoric()" throws="java.lang.Exception">public void testPatchedNameKeysGazaHistoric() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZone.testProvider()</name>
                    <modified-code visibility="public" return-type="void" signature="testProvider()" full-signature="org.joda.time.TestDateTimeZone.testProvider()" throws="">public void testProvider()</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="package" static="yes" final="yes" type="boolean" name="JDK6" signature="JDK6" full-signature="org.joda.time.TestDateTimeZone.JDK6">static final boolean JDK6</declaration>
            </new-fields>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testForID_String_old()" full-signature="org.joda.time.TestDateTimeZone.testForID_String_old()" throws="">public void testForID_String_old()</declaration>
                <declaration visibility="public" return-type="void" signature="testGetName_berlin()" full-signature="org.joda.time.TestDateTimeZone.testGetName_berlin()" throws="">public void testGetName_berlin()</declaration>
                <declaration visibility="public" return-type="void" signature="testGetShortName_berlin()" full-signature="org.joda.time.TestDateTimeZone.testGetShortName_berlin()" throws="">public void testGetShortName_berlin()</declaration>
                <declaration visibility="public" return-type="void" signature="testNameProvider_badClassName()" full-signature="org.joda.time.TestDateTimeZone.testNameProvider_badClassName()" throws="">public void testNameProvider_badClassName()</declaration>
                <declaration visibility="public" return-type="void" signature="testProvider_badClassName()" full-signature="org.joda.time.TestDateTimeZone.testProvider_badClassName()" throws="">public void testProvider_badClassName()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestDateTimeZoneCutover</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)</name>
                    <modified-code visibility="private" return-type="void" signature="doTest_getOffsetFromLocal(int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)" full-signature="org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)" throws="">private void doTest_getOffsetFromLocal(int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)</name>
                    <modified-code visibility="private" return-type="void" signature="doTest_getOffsetFromLocal(int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)" full-signature="org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)" throws="">private void doTest_getOffsetFromLocal(int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZoneCutover.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestDateTimeZoneCutover.static {}" throws="">static {}</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZoneCutover.test_DateTime_JustAfterLastEverOverlap()</name>
                    <modified-code visibility="public" return-type="void" signature="test_DateTime_JustAfterLastEverOverlap()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_DateTime_JustAfterLastEverOverlap()" throws="">public void test_DateTime_JustAfterLastEverOverlap()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZoneCutover.test_DateTime_new_Gaza()</name>
                    <modified-code visibility="public" return-type="void" signature="test_DateTime_new_Gaza()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_DateTime_new_Gaza()" throws="">public void test_DateTime_new_Gaza()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZoneCutover.test_DateTime_new_Turk()</name>
                    <modified-code visibility="public" return-type="void" signature="test_DateTime_new_Turk()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_DateTime_new_Turk()" throws="">public void test_DateTime_new_Turk()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZoneCutover.test_DateTime_parse_Gaza()</name>
                    <modified-code visibility="public" return-type="void" signature="test_DateTime_parse_Gaza()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_DateTime_parse_Gaza()" throws="">public void test_DateTime_parse_Gaza()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZoneCutover.test_DateTime_parse_Turk()</name>
                    <modified-code visibility="public" return-type="void" signature="test_DateTime_parse_Turk()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_DateTime_parse_Turk()" throws="">public void test_DateTime_parse_Turk()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZoneCutover.test_LocalDate_toDateMidnight_Gaza()</name>
                    <modified-code visibility="public" return-type="void" signature="test_LocalDate_toDateMidnight_Gaza()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_LocalDate_toDateMidnight_Gaza()" throws="">public void test_LocalDate_toDateMidnight_Gaza()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTimeZoneCutover.test_LocalDate_toDateMidnight_Turk()</name>
                    <modified-code visibility="public" return-type="void" signature="test_LocalDate_toDateMidnight_Turk()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_LocalDate_toDateMidnight_Turk()" throws="">public void test_LocalDate_toDateMidnight_Turk()</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.DateTimeZone" name="ZONE_PARIS" signature="ZONE_PARIS" full-signature="org.joda.time.TestDateTimeZoneCutover.ZONE_PARIS">private static final org.joda.time.DateTimeZone ZONE_PARIS</declaration>
            </new-fields>
            <new-methods>
                <declaration visibility="private" return-type="void" signature="doTest_getOffsetFromLocal(int, int, int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)" full-signature="org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(int, int, int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)" throws="">private void doTest_getOffsetFromLocal(int, int, int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)</declaration>
                <declaration visibility="private" return-type="void" signature="doTest_getOffsetFromLocal(int, int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)" full-signature="org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(int, int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)" throws="">private void doTest_getOffsetFromLocal(int, int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)</declaration>
                <declaration visibility="public" return-type="void" signature="testBug2182444_ausNSW()" full-signature="org.joda.time.TestDateTimeZoneCutover.testBug2182444_ausNSW()" throws="">public void testBug2182444_ausNSW()</declaration>
                <declaration visibility="public" return-type="void" signature="testBug2182444_usCentral()" full-signature="org.joda.time.TestDateTimeZoneCutover.testBug2182444_usCentral()" throws="">public void testBug2182444_usCentral()</declaration>
                <declaration visibility="public" return-type="void" signature="testBug3192457_adjustOffset()" full-signature="org.joda.time.TestDateTimeZoneCutover.testBug3192457_adjustOffset()" throws="">public void testBug3192457_adjustOffset()</declaration>
                <declaration visibility="public" return-type="void" signature="testBug3476684_adjustOffset()" full-signature="org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset()" throws="">public void testBug3476684_adjustOffset()</declaration>
                <declaration visibility="public" return-type="void" signature="testBug3476684_adjustOffset_springGap()" full-signature="org.joda.time.TestDateTimeZoneCutover.testBug3476684_adjustOffset_springGap()" throws="">public void testBug3476684_adjustOffset_springGap()</declaration>
                <declaration visibility="public" return-type="void" signature="testDateTimeCreation_athens()" full-signature="org.joda.time.TestDateTimeZoneCutover.testDateTimeCreation_athens()" throws="">public void testDateTimeCreation_athens()</declaration>
                <declaration visibility="public" return-type="void" signature="testDateTimeCreation_london()" full-signature="org.joda.time.TestDateTimeZoneCutover.testDateTimeCreation_london()" throws="">public void testDateTimeCreation_london()</declaration>
                <declaration visibility="public" return-type="void" signature="testDateTimeCreation_losAngeles()" full-signature="org.joda.time.TestDateTimeZoneCutover.testDateTimeCreation_losAngeles()" throws="">public void testDateTimeCreation_losAngeles()</declaration>
                <declaration visibility="public" return-type="void" signature="testDateTimeCreation_newYork()" full-signature="org.joda.time.TestDateTimeZoneCutover.testDateTimeCreation_newYork()" throws="">public void testDateTimeCreation_newYork()</declaration>
                <declaration visibility="public" return-type="void" signature="testDateTimeCreation_paris()" full-signature="org.joda.time.TestDateTimeZoneCutover.testDateTimeCreation_paris()" throws="">public void testDateTimeCreation_paris()</declaration>
                <declaration visibility="public" return-type="void" signature="testForum4013394_retainOffsetWhenRetainFields_sameOffsetsDifferentZones()" full-signature="org.joda.time.TestDateTimeZoneCutover.testForum4013394_retainOffsetWhenRetainFields_sameOffsetsDifferentZones()" throws="">public void testForum4013394_retainOffsetWhenRetainFields_sameOffsetsDifferentZones()</declaration>
                <declaration visibility="public" return-type="void" signature="testPeriod()" full-signature="org.joda.time.TestDateTimeZoneCutover.testPeriod()" throws="">public void testPeriod()</declaration>
                <declaration visibility="public" return-type="void" signature="testPlusMillisInDstChange()" full-signature="org.joda.time.TestDateTimeZoneCutover.testPlusMillisInDstChange()" throws="">public void testPlusMillisInDstChange()</declaration>
                <declaration visibility="public" return-type="void" signature="testPlusMinutesInDstChange()" full-signature="org.joda.time.TestDateTimeZoneCutover.testPlusMinutesInDstChange()" throws="">public void testPlusMinutesInDstChange()</declaration>
                <declaration visibility="public" return-type="void" signature="testPlusSecondsInDstChange()" full-signature="org.joda.time.TestDateTimeZoneCutover.testPlusSecondsInDstChange()" throws="">public void testPlusSecondsInDstChange()</declaration>
                <declaration visibility="public" return-type="void" signature="testWithHourOfDayInDstChange()" full-signature="org.joda.time.TestDateTimeZoneCutover.testWithHourOfDayInDstChange()" throws="">public void testWithHourOfDayInDstChange()</declaration>
                <declaration visibility="public" return-type="void" signature="testWithMillisOfSecondInDstChange_NewYork_summer()" full-signature="org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_NewYork_summer()" throws="">public void testWithMillisOfSecondInDstChange_NewYork_summer()</declaration>
                <declaration visibility="public" return-type="void" signature="testWithMillisOfSecondInDstChange_NewYork_winter()" full-signature="org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_NewYork_winter()" throws="">public void testWithMillisOfSecondInDstChange_NewYork_winter()</declaration>
                <declaration visibility="public" return-type="void" signature="testWithMillisOfSecondInDstChange_Paris_summer()" full-signature="org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_summer()" throws="">public void testWithMillisOfSecondInDstChange_Paris_summer()</declaration>
                <declaration visibility="public" return-type="void" signature="testWithMillisOfSecondInDstChange_Paris_winter()" full-signature="org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_winter()" throws="">public void testWithMillisOfSecondInDstChange_Paris_winter()</declaration>
                <declaration visibility="public" return-type="void" signature="testWithMinuteOfHourInDstChange()" full-signature="org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange()" throws="">public void testWithMinuteOfHourInDstChange()</declaration>
                <declaration visibility="public" return-type="void" signature="testWithMinuteOfHourInDstChange_mockZone()" full-signature="org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone()" throws="">public void testWithMinuteOfHourInDstChange_mockZone()</declaration>
                <declaration visibility="public" return-type="void" signature="testWithSecondOfMinuteInDstChange()" full-signature="org.joda.time.TestDateTimeZoneCutover.testWithSecondOfMinuteInDstChange()" throws="">public void testWithSecondOfMinuteInDstChange()</declaration>
                <declaration visibility="public" return-type="void" signature="test_DateTime_constructor_Moscow_Autumn()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_DateTime_constructor_Moscow_Autumn()" throws="">public void test_DateTime_constructor_Moscow_Autumn()</declaration>
                <declaration visibility="public" return-type="void" signature="test_DateTime_constructor_NewYork_Autumn()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_DateTime_constructor_NewYork_Autumn()" throws="">public void test_DateTime_constructor_NewYork_Autumn()</declaration>
                <declaration visibility="public" return-type="void" signature="test_getOffsetFromLocal_Moscow_Autumn()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Autumn()" throws="">public void test_getOffsetFromLocal_Moscow_Autumn()</declaration>
                <declaration visibility="public" return-type="void" signature="test_getOffsetFromLocal_Moscow_Autumn_overlap_mins()" full-signature="org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Autumn_overlap_mins()" throws="">public void test_getOffsetFromLocal_Moscow_Autumn_overlap_mins()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestDateTime_Basics$1</name>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="serialVersionUID" signature="serialVersionUID" full-signature="org.joda.time.TestDateTime_Basics$1.serialVersionUID" value="1">private static final long serialVersionUID</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.TestDateTime_Basics$MockEqualsChronology</name>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="serialVersionUID" signature="serialVersionUID" full-signature="org.joda.time.TestDateTime_Basics$MockEqualsChronology.serialVersionUID" value="1">private static final long serialVersionUID</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.TestDateTime_Constructors</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_formatter()" full-signature="org.joda.time.TestDateTime_Constructors.testParse_formatter()" throws="java.lang.Throwable">public void testParse_formatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestDateTime_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now()" full-signature="org.joda.time.TestDateTime_Constructors.test_now()" throws="java.lang.Throwable">public void test_now() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_Chronology()" full-signature="org.joda.time.TestDateTime_Constructors.test_now_Chronology()" throws="java.lang.Throwable">public void test_now_Chronology() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_DateTimeZone()" full-signature="org.joda.time.TestDateTime_Constructors.test_now_DateTimeZone()" throws="java.lang.Throwable">public void test_now_DateTimeZone() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_nullChronology()" full-signature="org.joda.time.TestDateTime_Constructors.test_now_nullChronology()" throws="java.lang.Throwable">public void test_now_nullChronology() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_nullDateTimeZone()" full-signature="org.joda.time.TestDateTime_Constructors.test_now_nullDateTimeZone()" throws="java.lang.Throwable">public void test_now_nullDateTimeZone() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestDateTime_Properties</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestDateTime_Properties.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestDateTime_Properties.static {}" throws="">static {}</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTime_Properties.testPropertyGetCenturyOfEra()</name>
                    <modified-code visibility="public" return-type="void" signature="testPropertyGetCenturyOfEra()" full-signature="org.joda.time.TestDateTime_Properties.testPropertyGetCenturyOfEra()" throws="">public void testPropertyGetCenturyOfEra()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestDateTime_Properties.testPropertyGetYearOfEra()</name>
                    <modified-code visibility="public" return-type="void" signature="testPropertyGetYearOfEra()" full-signature="org.joda.time.TestDateTime_Properties.testPropertyGetYearOfEra()" throws="">public void testPropertyGetYearOfEra()</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testPropertyWithMaximumValueMillisOfDayDSTGap()" full-signature="org.joda.time.TestDateTime_Properties.testPropertyWithMaximumValueMillisOfDayDSTGap()" throws="">public void testPropertyWithMaximumValueMillisOfDayDSTGap()</declaration>
                <declaration visibility="public" return-type="void" signature="testPropertyWithMinimumValueMillisOfDayDSTGap()" full-signature="org.joda.time.TestDateTime_Properties.testPropertyWithMinimumValueMillisOfDayDSTGap()" throws="">public void testPropertyWithMinimumValueMillisOfDayDSTGap()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestDays</name>
            <removed-methods>
                <declaration visibility="public" return-type="void" signature="testFactory_daysBetween_RPartial()" full-signature="org.joda.time.TestDays.testFactory_daysBetween_RPartial()" throws="">public void testFactory_daysBetween_RPartial()</declaration>
            </removed-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testFactory_daysBetween_RPartial_LocalDate()" full-signature="org.joda.time.TestDays.testFactory_daysBetween_RPartial_LocalDate()" throws="">public void testFactory_daysBetween_RPartial_LocalDate()</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_daysBetween_RPartial_MonthDay()" full-signature="org.joda.time.TestDays.testFactory_daysBetween_RPartial_MonthDay()" throws="">public void testFactory_daysBetween_RPartial_MonthDay()</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_daysBetween_RPartial_YearMonth()" full-signature="org.joda.time.TestDays.testFactory_daysBetween_RPartial_YearMonth()" throws="">public void testFactory_daysBetween_RPartial_YearMonth()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestDuration_Basics</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestDuration_Basics.testToPeriod()</name>
                    <modified-code visibility="public" return-type="void" signature="testToPeriod()" full-signature="org.joda.time.TestDuration_Basics.testToPeriod()" throws="">public void testToPeriod()</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testDividedBy_long1()" full-signature="org.joda.time.TestDuration_Basics.testDividedBy_long1()" throws="">public void testDividedBy_long1()</declaration>
                <declaration visibility="public" return-type="void" signature="testDividedBy_long2()" full-signature="org.joda.time.TestDuration_Basics.testDividedBy_long2()" throws="">public void testDividedBy_long2()</declaration>
                <declaration visibility="public" return-type="void" signature="testMultipliedBy_long1()" full-signature="org.joda.time.TestDuration_Basics.testMultipliedBy_long1()" throws="">public void testMultipliedBy_long1()</declaration>
                <declaration visibility="public" return-type="void" signature="testMultipliedBy_long2()" full-signature="org.joda.time.TestDuration_Basics.testMultipliedBy_long2()" throws="">public void testMultipliedBy_long2()</declaration>
                <declaration visibility="public" return-type="void" signature="testNegated_long1()" full-signature="org.joda.time.TestDuration_Basics.testNegated_long1()" throws="">public void testNegated_long1()</declaration>
                <declaration visibility="public" return-type="void" signature="testNegated_long2()" full-signature="org.joda.time.TestDuration_Basics.testNegated_long2()" throws="">public void testNegated_long2()</declaration>
                <declaration visibility="public" return-type="void" signature="testNegated_long3()" full-signature="org.joda.time.TestDuration_Basics.testNegated_long3()" throws="">public void testNegated_long3()</declaration>
                <declaration visibility="public" return-type="void" signature="testToPeriod_fixedZone()" full-signature="org.joda.time.TestDuration_Basics.testToPeriod_fixedZone()" throws="java.lang.Throwable">public void testToPeriod_fixedZone() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestDuration_Constructors</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestDuration_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestInstant_Constructors</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_formatter()" full-signature="org.joda.time.TestInstant_Constructors.testParse_formatter()" throws="java.lang.Throwable">public void testParse_formatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestInstant_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now()" full-signature="org.joda.time.TestInstant_Constructors.test_now()" throws="java.lang.Throwable">public void test_now() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestInterval_Basics</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestInterval_Basics.testToString()</name>
                    <modified-code visibility="public" return-type="void" signature="testToString()" full-signature="org.joda.time.TestInterval_Basics.testToString()" throws="">public void testToString()</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testIsEqual_RI()" full-signature="org.joda.time.TestInterval_Basics.testIsEqual_RI()" throws="">public void testIsEqual_RI()</declaration>
                <declaration visibility="public" return-type="void" signature="testToString_reparse()" full-signature="org.joda.time.TestInterval_Basics.testToString_reparse()" throws="">public void testToString_reparse()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestInterval_Constructors</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestInterval_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestLocalDateTime_Basics</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="BUDDHIST_PARIS" signature="BUDDHIST_PARIS" full-signature="org.joda.time.TestLocalDateTime_Basics.BUDDHIST_PARIS">private static final org.joda.time.Chronology BUDDHIST_PARIS</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="BUDDHIST_UTC" signature="BUDDHIST_UTC" full-signature="org.joda.time.TestLocalDateTime_Basics.BUDDHIST_UTC">private static final org.joda.time.Chronology BUDDHIST_UTC</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_PARIS" signature="ISO_PARIS" full-signature="org.joda.time.TestLocalDateTime_Basics.ISO_PARIS">private static final org.joda.time.Chronology ISO_PARIS</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_TOKYO" signature="ISO_TOKYO" full-signature="org.joda.time.TestLocalDateTime_Basics.ISO_TOKYO">private static final org.joda.time.Chronology ISO_TOKYO</declaration>
                <declaration visibility="private" static="yes" final="yes" type="int" name="OFFSET" signature="OFFSET" full-signature="org.joda.time.TestLocalDateTime_Basics.OFFSET" value="1">private static final int OFFSET</declaration>
            </removed-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestLocalDateTime_Basics.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestLocalDateTime_Basics.static {}" throws="">static {}</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestLocalDateTime_Basics.testCompareTo()</name>
                    <modified-code visibility="public" return-type="void" signature="testCompareTo()" full-signature="org.joda.time.TestLocalDateTime_Basics.testCompareTo()" throws="">public void testCompareTo()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestLocalDateTime_Basics.testSerialization()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerialization()" full-signature="org.joda.time.TestLocalDateTime_Basics.testSerialization()" throws="java.lang.Exception">public void testSerialization() throws java.lang.Exception</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testToDate_autumnDST_Zone()" full-signature="org.joda.time.TestLocalDateTime_Basics.testToDate_autumnDST_Zone()" throws="">public void testToDate_autumnDST_Zone()</declaration>
                <declaration visibility="public" return-type="void" signature="testToDate_springDST_2Hour40Savings_Zone()" full-signature="org.joda.time.TestLocalDateTime_Basics.testToDate_springDST_2Hour40Savings_Zone()" throws="">public void testToDate_springDST_2Hour40Savings_Zone()</declaration>
                <declaration visibility="public" return-type="void" signature="testToDate_springDST_Zone()" full-signature="org.joda.time.TestLocalDateTime_Basics.testToDate_springDST_Zone()" throws="">public void testToDate_springDST_Zone()</declaration>
                <declaration visibility="public" return-type="void" signature="testToDate_summer_Zone()" full-signature="org.joda.time.TestLocalDateTime_Basics.testToDate_summer_Zone()" throws="">public void testToDate_summer_Zone()</declaration>
                <declaration visibility="public" return-type="void" signature="testToDate_winter_Zone()" full-signature="org.joda.time.TestLocalDateTime_Basics.testToDate_winter_Zone()" throws="">public void testToDate_winter_Zone()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestLocalDateTime_Constructors</name>
            <removed-methods>
                <declaration visibility="public" return-type="void" signature="testFactory_FromCalendarFields()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_FromCalendarFields()" throws="java.lang.Exception">public void testFactory_FromCalendarFields() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_FromDateFields()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_FromDateFields()" throws="java.lang.Exception">public void testFactory_FromDateFields() throws java.lang.Exception</declaration>
            </removed-methods>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestLocalDateTime_Constructors.testConstructor()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testConstructor()" throws="java.lang.Throwable">public void testConstructor() throws java.lang.Throwable</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestLocalDateTime_Constructors.testConstructor_Chronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor_Chronology()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testConstructor_Chronology()" throws="java.lang.Throwable">public void testConstructor_Chronology() throws java.lang.Throwable</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestLocalDateTime_Constructors.testConstructor_DateTimeZone()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor_DateTimeZone()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testConstructor_DateTimeZone()" throws="java.lang.Throwable">public void testConstructor_DateTimeZone() throws java.lang.Throwable</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testConstructor_Object_Chronology_crossChronology()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testConstructor_Object_Chronology_crossChronology()" throws="java.lang.Throwable">public void testConstructor_Object_Chronology_crossChronology() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromCalendarFields()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields()" throws="java.lang.Exception">public void testFactory_fromCalendarFields() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromCalendarFields_beforeYearZero1()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero1()" throws="java.lang.Exception">public void testFactory_fromCalendarFields_beforeYearZero1() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromCalendarFields_beforeYearZero3()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_beforeYearZero3()" throws="java.lang.Exception">public void testFactory_fromCalendarFields_beforeYearZero3() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromCalendarFields_null()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_fromCalendarFields_null()" throws="java.lang.Exception">public void testFactory_fromCalendarFields_null() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromDateFields_after1970()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_after1970()" throws="java.lang.Exception">public void testFactory_fromDateFields_after1970() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromDateFields_before1970()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_before1970()" throws="java.lang.Exception">public void testFactory_fromDateFields_before1970() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromDateFields_beforeYearZero1()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero1()" throws="java.lang.Exception">public void testFactory_fromDateFields_beforeYearZero1() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromDateFields_beforeYearZero3()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_beforeYearZero3()" throws="java.lang.Exception">public void testFactory_fromDateFields_beforeYearZero3() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromDateFields_null()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testFactory_fromDateFields_null()" throws="java.lang.Exception">public void testFactory_fromDateFields_null() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_formatter()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testParse_formatter()" throws="java.lang.Throwable">public void testParse_formatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestLocalDateTime_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestLocalDate_Basics</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestLocalDate_Basics.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestLocalDate_Basics.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestLocalDate_Constructors</name>
            <removed-methods>
                <declaration visibility="public" return-type="void" signature="testFactory_FromCalendarFields()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_FromCalendarFields()" throws="java.lang.Exception">public void testFactory_FromCalendarFields() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_FromDateFields()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_FromDateFields()" throws="java.lang.Exception">public void testFactory_FromDateFields() throws java.lang.Exception</declaration>
            </removed-methods>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestLocalDate_Constructors.testConstructor()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor()" full-signature="org.joda.time.TestLocalDate_Constructors.testConstructor()" throws="java.lang.Throwable">public void testConstructor() throws java.lang.Throwable</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestLocalDate_Constructors.testConstructor_Chronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor_Chronology()" full-signature="org.joda.time.TestLocalDate_Constructors.testConstructor_Chronology()" throws="java.lang.Throwable">public void testConstructor_Chronology() throws java.lang.Throwable</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestLocalDate_Constructors.testConstructor_DateTimeZone()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor_DateTimeZone()" full-signature="org.joda.time.TestLocalDate_Constructors.testConstructor_DateTimeZone()" throws="java.lang.Throwable">public void testConstructor_DateTimeZone() throws java.lang.Throwable</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testConstructor_Object_Chronology_crossChronology()" full-signature="org.joda.time.TestLocalDate_Constructors.testConstructor_Object_Chronology_crossChronology()" throws="java.lang.Throwable">public void testConstructor_Object_Chronology_crossChronology() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromCalendarFields()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields()" throws="java.lang.Exception">public void testFactory_fromCalendarFields() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromCalendarFields_beforeYearZero1()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero1()" throws="java.lang.Exception">public void testFactory_fromCalendarFields_beforeYearZero1() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromCalendarFields_beforeYearZero3()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_beforeYearZero3()" throws="java.lang.Exception">public void testFactory_fromCalendarFields_beforeYearZero3() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromCalendarFields_null()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_fromCalendarFields_null()" throws="java.lang.Exception">public void testFactory_fromCalendarFields_null() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromDateFields_after1970()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_after1970()" throws="java.lang.Exception">public void testFactory_fromDateFields_after1970() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromDateFields_before1970()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_before1970()" throws="java.lang.Exception">public void testFactory_fromDateFields_before1970() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromDateFields_beforeYearZero1()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero1()" throws="java.lang.Exception">public void testFactory_fromDateFields_beforeYearZero1() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromDateFields_beforeYearZero3()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_beforeYearZero3()" throws="java.lang.Exception">public void testFactory_fromDateFields_beforeYearZero3() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_fromDateFields_null()" full-signature="org.joda.time.TestLocalDate_Constructors.testFactory_fromDateFields_null()" throws="java.lang.Exception">public void testFactory_fromDateFields_null() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_formatter()" full-signature="org.joda.time.TestLocalDate_Constructors.testParse_formatter()" throws="java.lang.Throwable">public void testParse_formatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestLocalDate_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestLocalTime_Basics$1</name>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="serialVersionUID" signature="serialVersionUID" full-signature="org.joda.time.TestLocalTime_Basics$1.serialVersionUID" value="1">private static final long serialVersionUID</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.TestLocalTime_Basics$2</name>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="serialVersionUID" signature="serialVersionUID" full-signature="org.joda.time.TestLocalTime_Basics$2.serialVersionUID" value="1">private static final long serialVersionUID</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.TestLocalTime_Constructors</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestLocalTime_Constructors.testConstructor()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor()" full-signature="org.joda.time.TestLocalTime_Constructors.testConstructor()" throws="java.lang.Throwable">public void testConstructor() throws java.lang.Throwable</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestLocalTime_Constructors.testConstructor_Chronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor_Chronology()" full-signature="org.joda.time.TestLocalTime_Constructors.testConstructor_Chronology()" throws="java.lang.Throwable">public void testConstructor_Chronology() throws java.lang.Throwable</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestLocalTime_Constructors.testConstructor_DateTimeZone()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor_DateTimeZone()" full-signature="org.joda.time.TestLocalTime_Constructors.testConstructor_DateTimeZone()" throws="java.lang.Throwable">public void testConstructor_DateTimeZone() throws java.lang.Throwable</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_formatter()" full-signature="org.joda.time.TestLocalTime_Constructors.testParse_formatter()" throws="java.lang.Throwable">public void testParse_formatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestLocalTime_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestMonthDay_Basics</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testMinusDays_int_fromLeap()" full-signature="org.joda.time.TestMonthDay_Basics.testMinusDays_int_fromLeap()" throws="">public void testMinusDays_int_fromLeap()</declaration>
                <declaration visibility="public" return-type="void" signature="testMinusDays_int_negativeFromLeap()" full-signature="org.joda.time.TestMonthDay_Basics.testMinusDays_int_negativeFromLeap()" throws="">public void testMinusDays_int_negativeFromLeap()</declaration>
                <declaration visibility="public" return-type="void" signature="testMinusMonths_int_endOfMonthAdjust()" full-signature="org.joda.time.TestMonthDay_Basics.testMinusMonths_int_endOfMonthAdjust()" throws="">public void testMinusMonths_int_endOfMonthAdjust()</declaration>
                <declaration visibility="public" return-type="void" signature="testMinusMonths_int_fromLeap()" full-signature="org.joda.time.TestMonthDay_Basics.testMinusMonths_int_fromLeap()" throws="">public void testMinusMonths_int_fromLeap()</declaration>
                <declaration visibility="public" return-type="void" signature="testMinusMonths_int_negativeEndOfMonthAdjust()" full-signature="org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeEndOfMonthAdjust()" throws="">public void testMinusMonths_int_negativeEndOfMonthAdjust()</declaration>
                <declaration visibility="public" return-type="void" signature="testMinusMonths_int_negativeFromLeap()" full-signature="org.joda.time.TestMonthDay_Basics.testMinusMonths_int_negativeFromLeap()" throws="">public void testMinusMonths_int_negativeFromLeap()</declaration>
                <declaration visibility="public" return-type="void" signature="testPlusDays_int_fromLeap()" full-signature="org.joda.time.TestMonthDay_Basics.testPlusDays_int_fromLeap()" throws="">public void testPlusDays_int_fromLeap()</declaration>
                <declaration visibility="public" return-type="void" signature="testPlusDays_int_negativeFromLeap()" full-signature="org.joda.time.TestMonthDay_Basics.testPlusDays_int_negativeFromLeap()" throws="">public void testPlusDays_int_negativeFromLeap()</declaration>
                <declaration visibility="public" return-type="void" signature="testPlusMonths_int_endOfMonthAdjust()" full-signature="org.joda.time.TestMonthDay_Basics.testPlusMonths_int_endOfMonthAdjust()" throws="">public void testPlusMonths_int_endOfMonthAdjust()</declaration>
                <declaration visibility="public" return-type="void" signature="testPlusMonths_int_fromLeap()" full-signature="org.joda.time.TestMonthDay_Basics.testPlusMonths_int_fromLeap()" throws="">public void testPlusMonths_int_fromLeap()</declaration>
                <declaration visibility="public" return-type="void" signature="testPlusMonths_int_negativeEndOfMonthAdjust()" full-signature="org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeEndOfMonthAdjust()" throws="">public void testPlusMonths_int_negativeEndOfMonthAdjust()</declaration>
                <declaration visibility="public" return-type="void" signature="testPlusMonths_int_negativeFromLeap()" full-signature="org.joda.time.TestMonthDay_Basics.testPlusMonths_int_negativeFromLeap()" throws="">public void testPlusMonths_int_negativeFromLeap()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestMonthDay_Constructors</name>
            <removed-methods>
                <declaration visibility="public" return-type="void" signature="testConstructor_ObjectString2()" full-signature="org.joda.time.TestMonthDay_Constructors.testConstructor_ObjectString2()" throws="java.lang.Throwable">public void testConstructor_ObjectString2() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_ObjectString3()" full-signature="org.joda.time.TestMonthDay_Constructors.testConstructor_ObjectString3()" throws="java.lang.Throwable">public void testConstructor_ObjectString3() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_ObjectString4()" full-signature="org.joda.time.TestMonthDay_Constructors.testConstructor_ObjectString4()" throws="java.lang.Throwable">public void testConstructor_ObjectString4() throws java.lang.Throwable</declaration>
            </removed-methods>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestMonthDay_Constructors.testConstructor()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor()" full-signature="org.joda.time.TestMonthDay_Constructors.testConstructor()" throws="java.lang.Throwable">public void testConstructor() throws java.lang.Throwable</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestMonthDay_Constructors.testConstructor_Chronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor_Chronology()" full-signature="org.joda.time.TestMonthDay_Constructors.testConstructor_Chronology()" throws="java.lang.Throwable">public void testConstructor_Chronology() throws java.lang.Throwable</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestMonthDay_Constructors.testConstructor_DateTimeZone()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor_DateTimeZone()" full-signature="org.joda.time.TestMonthDay_Constructors.testConstructor_DateTimeZone()" throws="java.lang.Throwable">public void testConstructor_DateTimeZone() throws java.lang.Throwable</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_formatter()" full-signature="org.joda.time.TestMonthDay_Constructors.testParse_formatter()" throws="java.lang.Throwable">public void testParse_formatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestMonthDay_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestMonthDay_Properties</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.TestMonthDay_Properties.TestMonthDay_Properties(java.lang.String)</name>
                    <modified-code visibility="public" signature="TestMonthDay_Properties(java.lang.String)" full-signature="org.joda.time.TestMonthDay_Properties.TestMonthDay_Properties(java.lang.String)" throws="">public TestMonthDay_Properties(java.lang.String)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestMonthDay_Properties.setUp()</name>
                    <modified-code visibility="protected" return-type="void" signature="setUp()" full-signature="org.joda.time.TestMonthDay_Properties.setUp()" throws="java.lang.Exception">protected void setUp() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestMonthDay_Properties.tearDown()</name>
                    <modified-code visibility="protected" return-type="void" signature="tearDown()" full-signature="org.joda.time.TestMonthDay_Properties.tearDown()" throws="java.lang.Exception">protected void tearDown() throws java.lang.Exception</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" type="java.util.Locale" name="locale" signature="locale" full-signature="org.joda.time.TestMonthDay_Properties.locale">private java.util.Locale locale</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.TestMonths</name>
            <removed-methods>
                <declaration visibility="public" return-type="void" signature="testFactory_monthsBetween_RPartial()" full-signature="org.joda.time.TestMonths.testFactory_monthsBetween_RPartial()" throws="">public void testFactory_monthsBetween_RPartial()</declaration>
            </removed-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testFactory_monthsBetween_RPartial_LocalDate()" full-signature="org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_LocalDate()" throws="">public void testFactory_monthsBetween_RPartial_LocalDate()</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_monthsBetween_RPartial_MonthDay()" full-signature="org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_MonthDay()" throws="">public void testFactory_monthsBetween_RPartial_MonthDay()</declaration>
                <declaration visibility="public" return-type="void" signature="testFactory_monthsBetween_RPartial_YearMonth()" full-signature="org.joda.time.TestMonths.testFactory_monthsBetween_RPartial_YearMonth()" throws="">public void testFactory_monthsBetween_RPartial_YearMonth()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestMutableDateTime_Adds</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.DateTimeZone" name="PARIS" signature="PARIS" full-signature="org.joda.time.TestMutableDateTime_Adds.PARIS">private static final org.joda.time.DateTimeZone PARIS</declaration>
            </removed-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestMutableDateTime_Adds.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestMutableDateTime_Adds.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testAddDays_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapSummer_addZero()" throws="">public void testAddDays_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddDays_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapWinter_addZero()" throws="">public void testAddDays_int_dstOverlapWinter_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddHours_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddHours_int_dstOverlapSummer_addZero()" throws="">public void testAddHours_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddHours_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddHours_int_dstOverlapWinter_addZero()" throws="">public void testAddHours_int_dstOverlapWinter_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddMillis_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddMillis_int_dstOverlapSummer_addZero()" throws="">public void testAddMillis_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddMillis_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddMillis_int_dstOverlapWinter_addZero()" throws="">public void testAddMillis_int_dstOverlapWinter_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddMinutes_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddMinutes_int_dstOverlapSummer_addZero()" throws="">public void testAddMinutes_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddMinutes_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddMinutes_int_dstOverlapWinter_addZero()" throws="">public void testAddMinutes_int_dstOverlapWinter_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddMonths_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddMonths_int_dstOverlapSummer_addZero()" throws="">public void testAddMonths_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddMonths_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddMonths_int_dstOverlapWinter_addZero()" throws="">public void testAddMonths_int_dstOverlapWinter_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddSeconds_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddSeconds_int_dstOverlapSummer_addZero()" throws="">public void testAddSeconds_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddSeconds_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddSeconds_int_dstOverlapWinter_addZero()" throws="">public void testAddSeconds_int_dstOverlapWinter_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddWeeks_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddWeeks_int_dstOverlapSummer_addZero()" throws="">public void testAddWeeks_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddWeeks_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddWeeks_int_dstOverlapWinter_addZero()" throws="">public void testAddWeeks_int_dstOverlapWinter_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddYears_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddYears_int_dstOverlapSummer_addZero()" throws="">public void testAddYears_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAddYears_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAddYears_int_dstOverlapWinter_addZero()" throws="">public void testAddYears_int_dstOverlapWinter_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAdd_DurationFieldType_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapSummer_addZero()" throws="">public void testAdd_DurationFieldType_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testAdd_DurationFieldType_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapWinter_addZero()" throws="">public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestMutableDateTime_Basics</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestMutableDateTime_Basics.testToString_DTFormatter()</name>
                    <modified-code visibility="public" return-type="void" signature="testToString_DTFormatter()" full-signature="org.joda.time.TestMutableDateTime_Basics.testToString_DTFormatter()" throws="">public void testToString_DTFormatter()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestMutableDateTime_Basics$1</name>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="serialVersionUID" signature="serialVersionUID" full-signature="org.joda.time.TestMutableDateTime_Basics$1.serialVersionUID" value="1">private static final long serialVersionUID</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.TestMutableDateTime_Basics$MockEqualsChronology</name>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="serialVersionUID" signature="serialVersionUID" full-signature="org.joda.time.TestMutableDateTime_Basics$MockEqualsChronology.serialVersionUID" value="1">private static final long serialVersionUID</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.TestMutableDateTime_Constructors</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_formatter()" full-signature="org.joda.time.TestMutableDateTime_Constructors.testParse_formatter()" throws="java.lang.Throwable">public void testParse_formatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestMutableDateTime_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now()" full-signature="org.joda.time.TestMutableDateTime_Constructors.test_now()" throws="java.lang.Throwable">public void test_now() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_Chronology()" full-signature="org.joda.time.TestMutableDateTime_Constructors.test_now_Chronology()" throws="java.lang.Throwable">public void test_now_Chronology() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_DateTimeZone()" full-signature="org.joda.time.TestMutableDateTime_Constructors.test_now_DateTimeZone()" throws="java.lang.Throwable">public void test_now_DateTimeZone() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_nullChronology()" full-signature="org.joda.time.TestMutableDateTime_Constructors.test_now_nullChronology()" throws="java.lang.Throwable">public void test_now_nullChronology() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="test_now_nullDateTimeZone()" full-signature="org.joda.time.TestMutableDateTime_Constructors.test_now_nullDateTimeZone()" throws="java.lang.Throwable">public void test_now_nullDateTimeZone() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestMutableDateTime_Properties</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestMutableDateTime_Properties.testPropertyGetCenturyOfEra()</name>
                    <modified-code visibility="public" return-type="void" signature="testPropertyGetCenturyOfEra()" full-signature="org.joda.time.TestMutableDateTime_Properties.testPropertyGetCenturyOfEra()" throws="">public void testPropertyGetCenturyOfEra()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestMutableDateTime_Properties.testPropertyGetYearOfEra()</name>
                    <modified-code visibility="public" return-type="void" signature="testPropertyGetYearOfEra()" full-signature="org.joda.time.TestMutableDateTime_Properties.testPropertyGetYearOfEra()" throws="">public void testPropertyGetYearOfEra()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestMutableDateTime_Sets</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testSetDate_RI_different1()" full-signature="org.joda.time.TestMutableDateTime_Sets.testSetDate_RI_different1()" throws="">public void testSetDate_RI_different1()</declaration>
                <declaration visibility="public" return-type="void" signature="testSetDate_RI_different2()" full-signature="org.joda.time.TestMutableDateTime_Sets.testSetDate_RI_different2()" throws="">public void testSetDate_RI_different2()</declaration>
                <declaration visibility="public" return-type="void" signature="testSetDate_RI_same()" full-signature="org.joda.time.TestMutableDateTime_Sets.testSetDate_RI_same()" throws="">public void testSetDate_RI_same()</declaration>
                <declaration visibility="public" return-type="void" signature="testSetDayOfMonth_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Sets.testSetDayOfMonth_int_dstOverlapSummer_addZero()" throws="">public void testSetDayOfMonth_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testSetDayOfMonth_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Sets.testSetDayOfMonth_int_dstOverlapWinter_addZero()" throws="">public void testSetDayOfMonth_int_dstOverlapWinter_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testSetDayOfYear_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Sets.testSetDayOfYear_int_dstOverlapSummer_addZero()" throws="">public void testSetDayOfYear_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testSetDayOfYear_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Sets.testSetDayOfYear_int_dstOverlapWinter_addZero()" throws="">public void testSetDayOfYear_int_dstOverlapWinter_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testSetMonthOfYear_int_dstOverlapSummer_addZero()" full-signature="org.joda.time.TestMutableDateTime_Sets.testSetMonthOfYear_int_dstOverlapSummer_addZero()" throws="">public void testSetMonthOfYear_int_dstOverlapSummer_addZero()</declaration>
                <declaration visibility="public" return-type="void" signature="testSetMonthOfYear_int_dstOverlapWinter_addZero()" full-signature="org.joda.time.TestMutableDateTime_Sets.testSetMonthOfYear_int_dstOverlapWinter_addZero()" throws="">public void testSetMonthOfYear_int_dstOverlapWinter_addZero()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestMutableInterval_Basics</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestMutableInterval_Basics.testToString()</name>
                    <modified-code visibility="public" return-type="void" signature="testToString()" full-signature="org.joda.time.TestMutableInterval_Basics.testToString()" throws="">public void testToString()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestMutableInterval_Constructors</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestMutableInterval_Constructors.setUp()</name>
                    <modified-code visibility="protected" return-type="void" signature="setUp()" full-signature="org.joda.time.TestMutableInterval_Constructors.setUp()" throws="java.lang.Exception">protected void setUp() throws java.lang.Exception</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestMutableInterval_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestMutablePeriod_Constructors</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestMutablePeriod_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestPartial_Basics</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="BUDDHIST_PARIS" signature="BUDDHIST_PARIS" full-signature="org.joda.time.TestPartial_Basics.BUDDHIST_PARIS">private static final org.joda.time.Chronology BUDDHIST_PARIS</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="COPTIC_LONDON" signature="COPTIC_LONDON" full-signature="org.joda.time.TestPartial_Basics.COPTIC_LONDON">private static final org.joda.time.Chronology COPTIC_LONDON</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_LONDON" signature="ISO_LONDON" full-signature="org.joda.time.TestPartial_Basics.ISO_LONDON">private static final org.joda.time.Chronology ISO_LONDON</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_PARIS" signature="ISO_PARIS" full-signature="org.joda.time.TestPartial_Basics.ISO_PARIS">private static final org.joda.time.Chronology ISO_PARIS</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_TOKYO" signature="ISO_TOKYO" full-signature="org.joda.time.TestPartial_Basics.ISO_TOKYO">private static final org.joda.time.Chronology ISO_TOKYO</declaration>
                <declaration visibility="private" static="yes" final="yes" type="int" name="OFFSET" signature="OFFSET" full-signature="org.joda.time.TestPartial_Basics.OFFSET" value="1">private static final int OFFSET</declaration>
                <declaration visibility="private" type="long" name="TEST_TIME1" signature="TEST_TIME1" full-signature="org.joda.time.TestPartial_Basics.TEST_TIME1">private long TEST_TIME1</declaration>
            </removed-fields>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.TestPartial_Basics.TestPartial_Basics(java.lang.String)</name>
                    <modified-code visibility="public" signature="TestPartial_Basics(java.lang.String)" full-signature="org.joda.time.TestPartial_Basics.TestPartial_Basics(java.lang.String)" throws="">public TestPartial_Basics(java.lang.String)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestPartial_Basics.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestPartial_Basics.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testWith3()" full-signature="org.joda.time.TestPartial_Basics.testWith3()" throws="">public void testWith3()</declaration>
                <declaration visibility="public" return-type="void" signature="testWith_argHasNoRange()" full-signature="org.joda.time.TestPartial_Basics.testWith_argHasNoRange()" throws="">public void testWith_argHasNoRange()</declaration>
                <declaration visibility="public" return-type="void" signature="testWith_baseAndArgHaveNoRange()" full-signature="org.joda.time.TestPartial_Basics.testWith_baseAndArgHaveNoRange()" throws="">public void testWith_baseAndArgHaveNoRange()</declaration>
                <declaration visibility="public" return-type="void" signature="testWith_baseHasNoRange()" full-signature="org.joda.time.TestPartial_Basics.testWith_baseHasNoRange()" throws="">public void testWith_baseHasNoRange()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestPartial_Constructors</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="int" name="OFFSET" signature="OFFSET" full-signature="org.joda.time.TestPartial_Constructors.OFFSET" value="1">private static final int OFFSET</declaration>
                <declaration visibility="private" type="long" name="TEST_TIME1" signature="TEST_TIME1" full-signature="org.joda.time.TestPartial_Constructors.TEST_TIME1">private long TEST_TIME1</declaration>
                <declaration visibility="private" type="long" name="TEST_TIME2" signature="TEST_TIME2" full-signature="org.joda.time.TestPartial_Constructors.TEST_TIME2">private long TEST_TIME2</declaration>
            </removed-fields>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.TestPartial_Constructors.TestPartial_Constructors(java.lang.String)</name>
                    <modified-code visibility="public" signature="TestPartial_Constructors(java.lang.String)" full-signature="org.joda.time.TestPartial_Constructors.TestPartial_Constructors(java.lang.String)" throws="">public TestPartial_Constructors(java.lang.String)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestPartial_Constructors.testConstructorEx8_TypeArray_intArray()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructorEx8_TypeArray_intArray()" full-signature="org.joda.time.TestPartial_Constructors.testConstructorEx8_TypeArray_intArray()" throws="java.lang.Throwable">public void testConstructorEx8_TypeArray_intArray() throws java.lang.Throwable</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestPeriodType</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestPeriodType.testForFields4()</name>
                    <modified-code visibility="public" return-type="void" signature="testForFields4()" full-signature="org.joda.time.TestPeriodType.testForFields4()" throws="java.lang.Exception">public void testForFields4() throws java.lang.Exception</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testForFields7()" full-signature="org.joda.time.TestPeriodType.testForFields7()" throws="java.lang.Exception">public void testForFields7() throws java.lang.Exception</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestPeriod_Basics</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testMultipliedBy()" full-signature="org.joda.time.TestPeriod_Basics.testMultipliedBy()" throws="">public void testMultipliedBy()</declaration>
                <declaration visibility="public" return-type="void" signature="testNegated()" full-signature="org.joda.time.TestPeriod_Basics.testNegated()" throws="">public void testNegated()</declaration>
                <declaration visibility="public" return-type="void" signature="testNormalizedStandard_periodType_months1()" full-signature="org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months1()" throws="">public void testNormalizedStandard_periodType_months1()</declaration>
                <declaration visibility="public" return-type="void" signature="testNormalizedStandard_periodType_months2()" full-signature="org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months2()" throws="">public void testNormalizedStandard_periodType_months2()</declaration>
                <declaration visibility="public" return-type="void" signature="testNormalizedStandard_periodType_months3()" full-signature="org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_months3()" throws="">public void testNormalizedStandard_periodType_months3()</declaration>
                <declaration visibility="public" return-type="void" signature="testNormalizedStandard_periodType_monthsWeeks()" full-signature="org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_monthsWeeks()" throws="">public void testNormalizedStandard_periodType_monthsWeeks()</declaration>
                <declaration visibility="public" return-type="void" signature="testNormalizedStandard_periodType_years()" full-signature="org.joda.time.TestPeriod_Basics.testNormalizedStandard_periodType_years()" throws="">public void testNormalizedStandard_periodType_years()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestPeriod_Basics$MockPeriod</name>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="serialVersionUID" signature="serialVersionUID" full-signature="org.joda.time.TestPeriod_Basics$MockPeriod.serialVersionUID" value="1">private static final long serialVersionUID</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.TestPeriod_Constructors</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testConstructor_long_fixedZone()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_long_fixedZone()" throws="java.lang.Throwable">public void testConstructor_long_fixedZone() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth1()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth1()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth1() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth2()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth2()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth2() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth3()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth3()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth3() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_LD_LD_toFeb_exactMonths()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_LD_LD_toFeb_exactMonths()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_LD_LD_toFeb_exactMonths() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_LD_LD_toFeb_leapYear()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_LD_LD_toFeb_leapYear()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_LD_LD_toFeb_leapYear() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_LD_LD_toFeb_standardYear()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_LD_LD_toFeb_standardYear()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_LD_LD_toFeb_standardYear() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth1()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth1()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth1() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth2()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth2()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth2() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth1()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth1()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth1() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth2()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth2()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth2() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth3()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth3()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth3() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_RI_RI_toFeb_exactMonths()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_RI_RI_toFeb_exactMonths()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_RI_RI_toFeb_exactMonths() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_RI_RI_toFeb_leapYear()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_RI_RI_toFeb_leapYear()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_RI_RI_toFeb_leapYear() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_RI_RI_toFeb_standardYear()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_RI_RI_toFeb_standardYear()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_RI_RI_toFeb_standardYear() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth1()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth1()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth1() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth2()" full-signature="org.joda.time.TestPeriod_Constructors.testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth2()" throws="java.lang.Throwable">public void testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth2() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestPeriod_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestSerialization</name>
            <removed-methods>
                <declaration visibility="private" return-type="void" signature="store(java.io.Serializable, java.lang.String)" full-signature="org.joda.time.TestSerialization.store(java.io.Serializable, java.lang.String)" throws="java.lang.Exception">private void store(java.io.Serializable, java.lang.String) throws java.lang.Exception</declaration>
            </removed-methods>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestSerialization.loadAndCompare(java.io.Serializable, java.lang.String, boolean)</name>
                    <modified-code visibility="private" return-type="void" signature="loadAndCompare(java.io.Serializable, java.lang.String, boolean)" full-signature="org.joda.time.TestSerialization.loadAndCompare(java.io.Serializable, java.lang.String, boolean)" throws="java.lang.Exception">private void loadAndCompare(java.io.Serializable, java.lang.String, boolean) throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedBuddhistChronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedBuddhistChronology()" full-signature="org.joda.time.TestSerialization.testSerializedBuddhistChronology()" throws="java.lang.Exception">public void testSerializedBuddhistChronology() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedCopticChronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedCopticChronology()" full-signature="org.joda.time.TestSerialization.testSerializedCopticChronology()" throws="java.lang.Exception">public void testSerializedCopticChronology() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedDateMidnight()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedDateMidnight()" full-signature="org.joda.time.TestSerialization.testSerializedDateMidnight()" throws="java.lang.Exception">public void testSerializedDateMidnight() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedDateMidnightProperty()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedDateMidnightProperty()" full-signature="org.joda.time.TestSerialization.testSerializedDateMidnightProperty()" throws="java.lang.Exception">public void testSerializedDateMidnightProperty() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedDateTime()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedDateTime()" full-signature="org.joda.time.TestSerialization.testSerializedDateTime()" throws="java.lang.Exception">public void testSerializedDateTime() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedDateTimeFieldType()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedDateTimeFieldType()" full-signature="org.joda.time.TestSerialization.testSerializedDateTimeFieldType()" throws="java.lang.Exception">public void testSerializedDateTimeFieldType() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedDateTimeProperty()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedDateTimeProperty()" full-signature="org.joda.time.TestSerialization.testSerializedDateTimeProperty()" throws="java.lang.Exception">public void testSerializedDateTimeProperty() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedDateTimeZone()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedDateTimeZone()" full-signature="org.joda.time.TestSerialization.testSerializedDateTimeZone()" throws="java.lang.Exception">public void testSerializedDateTimeZone() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedDateTimeZoneUTC()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedDateTimeZoneUTC()" full-signature="org.joda.time.TestSerialization.testSerializedDateTimeZoneUTC()" throws="java.lang.Exception">public void testSerializedDateTimeZoneUTC() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedGJChronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedGJChronology()" full-signature="org.joda.time.TestSerialization.testSerializedGJChronology()" throws="java.lang.Exception">public void testSerializedGJChronology() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedGJChronologyChangedInternals()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedGJChronologyChangedInternals()" full-signature="org.joda.time.TestSerialization.testSerializedGJChronologyChangedInternals()" throws="java.lang.Exception">public void testSerializedGJChronologyChangedInternals() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedGregorianChronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedGregorianChronology()" full-signature="org.joda.time.TestSerialization.testSerializedGregorianChronology()" throws="java.lang.Exception">public void testSerializedGregorianChronology() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedISOChronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedISOChronology()" full-signature="org.joda.time.TestSerialization.testSerializedISOChronology()" throws="java.lang.Exception">public void testSerializedISOChronology() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedInstant()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedInstant()" full-signature="org.joda.time.TestSerialization.testSerializedInstant()" throws="java.lang.Exception">public void testSerializedInstant() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedJulianChronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedJulianChronology()" full-signature="org.joda.time.TestSerialization.testSerializedJulianChronology()" throws="java.lang.Exception">public void testSerializedJulianChronology() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedMutableDateTime()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedMutableDateTime()" full-signature="org.joda.time.TestSerialization.testSerializedMutableDateTime()" throws="java.lang.Exception">public void testSerializedMutableDateTime() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedMutableDateTimeProperty()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedMutableDateTimeProperty()" full-signature="org.joda.time.TestSerialization.testSerializedMutableDateTimeProperty()" throws="java.lang.Exception">public void testSerializedMutableDateTimeProperty() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedPeriodType()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedPeriodType()" full-signature="org.joda.time.TestSerialization.testSerializedPeriodType()" throws="java.lang.Exception">public void testSerializedPeriodType() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedTimeOfDay()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedTimeOfDay()" full-signature="org.joda.time.TestSerialization.testSerializedTimeOfDay()" throws="java.lang.Exception">public void testSerializedTimeOfDay() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedUnsupportedDateTimeField()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedUnsupportedDateTimeField()" full-signature="org.joda.time.TestSerialization.testSerializedUnsupportedDateTimeField()" throws="java.lang.Exception">public void testSerializedUnsupportedDateTimeField() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestSerialization.testSerializedYearMonthDay()</name>
                    <modified-code visibility="public" return-type="void" signature="testSerializedYearMonthDay()" full-signature="org.joda.time.TestSerialization.testSerializedYearMonthDay()" throws="java.lang.Exception">public void testSerializedYearMonthDay() throws java.lang.Exception</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testDuration()" full-signature="org.joda.time.TestSerialization.testDuration()" throws="java.lang.Exception">public void testDuration() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testSerializedLocalDate()" full-signature="org.joda.time.TestSerialization.testSerializedLocalDate()" throws="java.lang.Exception">public void testSerializedLocalDate() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testSerializedLocalDateBuddhist()" full-signature="org.joda.time.TestSerialization.testSerializedLocalDateBuddhist()" throws="java.lang.Exception">public void testSerializedLocalDateBuddhist() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testSerializedLocalDateTime()" full-signature="org.joda.time.TestSerialization.testSerializedLocalDateTime()" throws="java.lang.Exception">public void testSerializedLocalDateTime() throws java.lang.Exception</declaration>
                <declaration visibility="public" return-type="void" signature="testSerializedLocalTime()" full-signature="org.joda.time.TestSerialization.testSerializedLocalTime()" throws="java.lang.Exception">public void testSerializedLocalTime() throws java.lang.Exception</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.TestTimeOfDay_Basics</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="BUDDHIST_LONDON" signature="BUDDHIST_LONDON" full-signature="org.joda.time.TestTimeOfDay_Basics.BUDDHIST_LONDON">private static final org.joda.time.Chronology BUDDHIST_LONDON</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="BUDDHIST_PARIS" signature="BUDDHIST_PARIS" full-signature="org.joda.time.TestTimeOfDay_Basics.BUDDHIST_PARIS">private static final org.joda.time.Chronology BUDDHIST_PARIS</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_LONDON" signature="ISO_LONDON" full-signature="org.joda.time.TestTimeOfDay_Basics.ISO_LONDON">private static final org.joda.time.Chronology ISO_LONDON</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_PARIS" signature="ISO_PARIS" full-signature="org.joda.time.TestTimeOfDay_Basics.ISO_PARIS">private static final org.joda.time.Chronology ISO_PARIS</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_TOKYO" signature="ISO_TOKYO" full-signature="org.joda.time.TestTimeOfDay_Basics.ISO_TOKYO">private static final org.joda.time.Chronology ISO_TOKYO</declaration>
                <declaration visibility="private" type="long" name="TEST_TIME1" signature="TEST_TIME1" full-signature="org.joda.time.TestTimeOfDay_Basics.TEST_TIME1">private long TEST_TIME1</declaration>
            </removed-fields>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.TestTimeOfDay_Basics.TestTimeOfDay_Basics(java.lang.String)</name>
                    <modified-code visibility="public" signature="TestTimeOfDay_Basics(java.lang.String)" full-signature="org.joda.time.TestTimeOfDay_Basics.TestTimeOfDay_Basics(java.lang.String)" throws="">public TestTimeOfDay_Basics(java.lang.String)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestTimeOfDay_Basics.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestTimeOfDay_Basics.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestTimeOfDay_Properties</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.DateTimeZone" name="PARIS" signature="PARIS" full-signature="org.joda.time.TestTimeOfDay_Properties.PARIS">private static final org.joda.time.DateTimeZone PARIS</declaration>
            </removed-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestTimeOfDay_Properties.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestTimeOfDay_Properties.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestYearMonthDay_Basics</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="BUDDHIST_LONDON" signature="BUDDHIST_LONDON" full-signature="org.joda.time.TestYearMonthDay_Basics.BUDDHIST_LONDON">private static final org.joda.time.Chronology BUDDHIST_LONDON</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="BUDDHIST_PARIS" signature="BUDDHIST_PARIS" full-signature="org.joda.time.TestYearMonthDay_Basics.BUDDHIST_PARIS">private static final org.joda.time.Chronology BUDDHIST_PARIS</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_LONDON" signature="ISO_LONDON" full-signature="org.joda.time.TestYearMonthDay_Basics.ISO_LONDON">private static final org.joda.time.Chronology ISO_LONDON</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_PARIS" signature="ISO_PARIS" full-signature="org.joda.time.TestYearMonthDay_Basics.ISO_PARIS">private static final org.joda.time.Chronology ISO_PARIS</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="ISO_TOKYO" signature="ISO_TOKYO" full-signature="org.joda.time.TestYearMonthDay_Basics.ISO_TOKYO">private static final org.joda.time.Chronology ISO_TOKYO</declaration>
                <declaration visibility="private" static="yes" final="yes" type="int" name="OFFSET" signature="OFFSET" full-signature="org.joda.time.TestYearMonthDay_Basics.OFFSET" value="1">private static final int OFFSET</declaration>
                <declaration visibility="private" type="long" name="TEST_TIME1" signature="TEST_TIME1" full-signature="org.joda.time.TestYearMonthDay_Basics.TEST_TIME1">private long TEST_TIME1</declaration>
                <declaration visibility="private" type="long" name="TEST_TIME2" signature="TEST_TIME2" full-signature="org.joda.time.TestYearMonthDay_Basics.TEST_TIME2">private long TEST_TIME2</declaration>
            </removed-fields>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.TestYearMonthDay_Basics.TestYearMonthDay_Basics(java.lang.String)</name>
                    <modified-code visibility="public" signature="TestYearMonthDay_Basics(java.lang.String)" full-signature="org.joda.time.TestYearMonthDay_Basics.TestYearMonthDay_Basics(java.lang.String)" throws="">public TestYearMonthDay_Basics(java.lang.String)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestYearMonthDay_Basics.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestYearMonthDay_Basics.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestYearMonthDay_Constructors</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="BUDDHIST_UTC" signature="BUDDHIST_UTC" full-signature="org.joda.time.TestYearMonthDay_Constructors.BUDDHIST_UTC">private static final org.joda.time.Chronology BUDDHIST_UTC</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="COPTIC_UTC" signature="COPTIC_UTC" full-signature="org.joda.time.TestYearMonthDay_Constructors.COPTIC_UTC">private static final org.joda.time.Chronology COPTIC_UTC</declaration>
            </removed-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestYearMonthDay_Constructors.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.TestYearMonthDay_Constructors.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.TestYearMonth_Constructors</name>
            <removed-methods>
                <declaration visibility="public" return-type="void" signature="testConstructor_ObjectString2()" full-signature="org.joda.time.TestYearMonth_Constructors.testConstructor_ObjectString2()" throws="java.lang.Throwable">public void testConstructor_ObjectString2() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_ObjectString3()" full-signature="org.joda.time.TestYearMonth_Constructors.testConstructor_ObjectString3()" throws="java.lang.Throwable">public void testConstructor_ObjectString3() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testConstructor_ObjectString4()" full-signature="org.joda.time.TestYearMonth_Constructors.testConstructor_ObjectString4()" throws="java.lang.Throwable">public void testConstructor_ObjectString4() throws java.lang.Throwable</declaration>
            </removed-methods>
            <modified-methods>
                <feature>
                    <name>org.joda.time.TestYearMonth_Constructors.testConstructor()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor()" full-signature="org.joda.time.TestYearMonth_Constructors.testConstructor()" throws="java.lang.Throwable">public void testConstructor() throws java.lang.Throwable</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestYearMonth_Constructors.testConstructor_Chronology()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor_Chronology()" full-signature="org.joda.time.TestYearMonth_Constructors.testConstructor_Chronology()" throws="java.lang.Throwable">public void testConstructor_Chronology() throws java.lang.Throwable</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.TestYearMonth_Constructors.testConstructor_DateTimeZone()</name>
                    <modified-code visibility="public" return-type="void" signature="testConstructor_DateTimeZone()" full-signature="org.joda.time.TestYearMonth_Constructors.testConstructor_DateTimeZone()" throws="java.lang.Throwable">public void testConstructor_DateTimeZone() throws java.lang.Throwable</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParse_formatter()" full-signature="org.joda.time.TestYearMonth_Constructors.testParse_formatter()" throws="java.lang.Throwable">public void testParse_formatter() throws java.lang.Throwable</declaration>
                <declaration visibility="public" return-type="void" signature="testParse_noFormatter()" full-signature="org.joda.time.TestYearMonth_Constructors.testParse_noFormatter()" throws="java.lang.Throwable">public void testParse_noFormatter() throws java.lang.Throwable</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.YearMonth</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.YearMonth.YearMonth(java.lang.Object)</name>
                    <modified-code visibility="public" signature="YearMonth(java.lang.Object)" full-signature="org.joda.time.YearMonth.YearMonth(java.lang.Object)" throws="">public YearMonth(java.lang.Object)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.YearMonth.YearMonth(java.lang.Object, org.joda.time.Chronology)</name>
                    <modified-code visibility="public" signature="YearMonth(java.lang.Object, org.joda.time.Chronology)" full-signature="org.joda.time.YearMonth.YearMonth(java.lang.Object, org.joda.time.Chronology)" throws="">public YearMonth(java.lang.Object, org.joda.time.Chronology)</modified-code>
                </feature>
            </modified-constructors>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="org.joda.time.YearMonth" signature="now()" full-signature="org.joda.time.YearMonth.now()" throws="">public static org.joda.time.YearMonth now()</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.YearMonth" signature="now(org.joda.time.Chronology)" full-signature="org.joda.time.YearMonth.now(org.joda.time.Chronology)" throws="">public static org.joda.time.YearMonth now(org.joda.time.Chronology)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.YearMonth" signature="now(org.joda.time.DateTimeZone)" full-signature="org.joda.time.YearMonth.now(org.joda.time.DateTimeZone)" throws="">public static org.joda.time.YearMonth now(org.joda.time.DateTimeZone)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.YearMonth" signature="parse(java.lang.String)" full-signature="org.joda.time.YearMonth.parse(java.lang.String)" throws="">public static org.joda.time.YearMonth parse(java.lang.String)</declaration>
                <declaration visibility="public" static="yes" return-type="org.joda.time.YearMonth" signature="parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" full-signature="org.joda.time.YearMonth.parse(java.lang.String, org.joda.time.format.DateTimeFormatter)" throws="">public static org.joda.time.YearMonth parse(java.lang.String, org.joda.time.format.DateTimeFormatter)</declaration>
                <declaration visibility="private" return-type="java.lang.Object" signature="readResolve()" full-signature="org.joda.time.YearMonth.readResolve()" throws="">private java.lang.Object readResolve()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.base.AbstractInterval</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.base.AbstractInterval.toString()</name>
                    <modified-code visibility="public" return-type="java.lang.String" signature="toString()" full-signature="org.joda.time.base.AbstractInterval.toString()" throws="">public java.lang.String toString()</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="isEqual(org.joda.time.ReadableInterval)" full-signature="org.joda.time.base.AbstractInterval.isEqual(org.joda.time.ReadableInterval)" throws="">public boolean isEqual(org.joda.time.ReadableInterval)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.base.AbstractPeriod</name>
            <new-methods>
                <declaration visibility="public" return-type="org.joda.time.DurationFieldType" signature="getFieldType(int)" full-signature="org.joda.time.base.AbstractPeriod.getFieldType(int)" throws="">public org.joda.time.DurationFieldType getFieldType(int)</declaration>
                <declaration visibility="public" return-type="int" signature="size()" full-signature="org.joda.time.base.AbstractPeriod.size()" throws="">public int size()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.base.BaseDateTime</name>
            <modified-fields>
                <feature>
                    <name>org.joda.time.base.BaseDateTime.iChronology</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.base.BaseDateTime.iChronology">private org.joda.time.Chronology iChronology</old-declaration>
                        <new-declaration visibility="private" volatile="yes" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.base.BaseDateTime.iChronology">private volatile org.joda.time.Chronology iChronology</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>org.joda.time.base.BaseDateTime.iMillis</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="long" name="iMillis" signature="iMillis" full-signature="org.joda.time.base.BaseDateTime.iMillis">private long iMillis</old-declaration>
                        <new-declaration visibility="private" volatile="yes" type="long" name="iMillis" signature="iMillis" full-signature="org.joda.time.base.BaseDateTime.iMillis">private volatile long iMillis</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
        </class>
        <class>
            <name>org.joda.time.base.BaseDuration</name>
            <modified-fields>
                <feature>
                    <name>org.joda.time.base.BaseDuration.iMillis</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="long" name="iMillis" signature="iMillis" full-signature="org.joda.time.base.BaseDuration.iMillis">private long iMillis</old-declaration>
                        <new-declaration visibility="private" volatile="yes" type="long" name="iMillis" signature="iMillis" full-signature="org.joda.time.base.BaseDuration.iMillis">private volatile long iMillis</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
        </class>
        <class>
            <name>org.joda.time.base.BaseInterval</name>
            <modified-fields>
                <feature>
                    <name>org.joda.time.base.BaseInterval.iChronology</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.base.BaseInterval.iChronology">private org.joda.time.Chronology iChronology</old-declaration>
                        <new-declaration visibility="private" volatile="yes" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.base.BaseInterval.iChronology">private volatile org.joda.time.Chronology iChronology</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>org.joda.time.base.BaseInterval.iEndMillis</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="long" name="iEndMillis" signature="iEndMillis" full-signature="org.joda.time.base.BaseInterval.iEndMillis">private long iEndMillis</old-declaration>
                        <new-declaration visibility="private" volatile="yes" type="long" name="iEndMillis" signature="iEndMillis" full-signature="org.joda.time.base.BaseInterval.iEndMillis">private volatile long iEndMillis</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>org.joda.time.base.BaseInterval.iStartMillis</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="long" name="iStartMillis" signature="iStartMillis" full-signature="org.joda.time.base.BaseInterval.iStartMillis">private long iStartMillis</old-declaration>
                        <new-declaration visibility="private" volatile="yes" type="long" name="iStartMillis" signature="iStartMillis" full-signature="org.joda.time.base.BaseInterval.iStartMillis">private volatile long iStartMillis</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
        </class>
        <class>
            <name>org.joda.time.base.BasePartial</name>
            <modified-fields>
                <feature>
                    <name>org.joda.time.base.BasePartial.iChronology</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.base.BasePartial.iChronology">private org.joda.time.Chronology iChronology</old-declaration>
                        <new-declaration visibility="private" final="yes" type="org.joda.time.Chronology" name="iChronology" signature="iChronology" full-signature="org.joda.time.base.BasePartial.iChronology">private final org.joda.time.Chronology iChronology</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>org.joda.time.base.BasePartial.iValues</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="int[]" name="iValues" signature="iValues" full-signature="org.joda.time.base.BasePartial.iValues">private int[] iValues</old-declaration>
                        <new-declaration visibility="private" final="yes" type="int[]" name="iValues" signature="iValues" full-signature="org.joda.time.base.BasePartial.iValues">private final int[] iValues</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.base.BasePartial.setValue(int, int)</name>
                    <modified-code visibility="protected" return-type="void" signature="setValue(int, int)" full-signature="org.joda.time.base.BasePartial.setValue(int, int)" throws="">protected void setValue(int, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.base.BasePartial.setValues(int[])</name>
                    <modified-code visibility="protected" return-type="void" signature="setValues(int[])" full-signature="org.joda.time.base.BasePartial.setValues(int[])" throws="">protected void setValues(int[])</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.base.BasePeriod</name>
            <removed-methods>
                <declaration visibility="public" return-type="org.joda.time.DurationFieldType" signature="getFieldType(int)" full-signature="org.joda.time.base.BasePeriod.getFieldType(int)" throws="">public org.joda.time.DurationFieldType getFieldType(int)</declaration>
                <declaration visibility="public" return-type="int" signature="size()" full-signature="org.joda.time.base.BasePeriod.size()" throws="">public int size()</declaration>
            </removed-methods>
            <modified-fields>
                <feature>
                    <name>org.joda.time.base.BasePeriod.iType</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="org.joda.time.PeriodType" name="iType" signature="iType" full-signature="org.joda.time.base.BasePeriod.iType">private org.joda.time.PeriodType iType</old-declaration>
                        <new-declaration visibility="private" final="yes" type="org.joda.time.PeriodType" name="iType" signature="iType" full-signature="org.joda.time.base.BasePeriod.iType">private final org.joda.time.PeriodType iType</new-declaration>
                    </modified-declaration>
                </feature>
                <feature>
                    <name>org.joda.time.base.BasePeriod.iValues</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="int[]" name="iValues" signature="iValues" full-signature="org.joda.time.base.BasePeriod.iValues">private int[] iValues</old-declaration>
                        <new-declaration visibility="private" final="yes" type="int[]" name="iValues" signature="iValues" full-signature="org.joda.time.base.BasePeriod.iValues">private final int[] iValues</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.base.BasePeriod.BasePeriod(int, int, int, int, int, int, int, int, org.joda.time.PeriodType)</name>
                    <modified-code visibility="protected" signature="BasePeriod(int, int, int, int, int, int, int, int, org.joda.time.PeriodType)" full-signature="org.joda.time.base.BasePeriod.BasePeriod(int, int, int, int, int, int, int, int, org.joda.time.PeriodType)" throws="">protected BasePeriod(int, int, int, int, int, int, int, int, org.joda.time.PeriodType)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.base.BasePeriod.addPeriod(org.joda.time.ReadablePeriod)</name>
                    <modified-code visibility="protected" return-type="void" signature="addPeriod(org.joda.time.ReadablePeriod)" full-signature="org.joda.time.base.BasePeriod.addPeriod(org.joda.time.ReadablePeriod)" throws="">protected void addPeriod(org.joda.time.ReadablePeriod)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.base.BasePeriod.mergePeriod(org.joda.time.ReadablePeriod)</name>
                    <modified-code visibility="protected" return-type="void" signature="mergePeriod(org.joda.time.ReadablePeriod)" full-signature="org.joda.time.base.BasePeriod.mergePeriod(org.joda.time.ReadablePeriod)" throws="">protected void mergePeriod(org.joda.time.ReadablePeriod)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.base.BasePeriod.setPeriod(int, int, int, int, int, int, int, int)</name>
                    <modified-code visibility="protected" return-type="void" signature="setPeriod(int, int, int, int, int, int, int, int)" full-signature="org.joda.time.base.BasePeriod.setPeriod(int, int, int, int, int, int, int, int)" throws="">protected void setPeriod(int, int, int, int, int, int, int, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.base.BasePeriod.setPeriodInternal(int, int, int, int, int, int, int, int)</name>
                    <modified-declaration>
                        <old-declaration visibility="private" return-type="void" signature="setPeriodInternal(int, int, int, int, int, int, int, int)" full-signature="org.joda.time.base.BasePeriod.setPeriodInternal(int, int, int, int, int, int, int, int)" throws="">private void setPeriodInternal(int, int, int, int, int, int, int, int)</old-declaration>
                        <new-declaration visibility="private" return-type="int[]" signature="setPeriodInternal(int, int, int, int, int, int, int, int)" full-signature="org.joda.time.base.BasePeriod.setPeriodInternal(int, int, int, int, int, int, int, int)" throws="">private int[] setPeriodInternal(int, int, int, int, int, int, int, int)</new-declaration>
                    </modified-declaration>
                    <modified-code visibility="private" return-type="int[]" signature="setPeriodInternal(int, int, int, int, int, int, int, int)" full-signature="org.joda.time.base.BasePeriod.setPeriodInternal(int, int, int, int, int, int, int, int)" throws="">private int[] setPeriodInternal(int, int, int, int, int, int, int, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.base.BasePeriod.setPeriodInternal(org.joda.time.ReadablePeriod)</name>
                    <modified-code visibility="private" return-type="void" signature="setPeriodInternal(org.joda.time.ReadablePeriod)" full-signature="org.joda.time.base.BasePeriod.setPeriodInternal(org.joda.time.ReadablePeriod)" throws="">private void setPeriodInternal(org.joda.time.ReadablePeriod)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.base.BasePeriod.setValues(int[])</name>
                    <modified-code visibility="protected" return-type="void" signature="setValues(int[])" full-signature="org.joda.time.base.BasePeriod.setValues(int[])" throws="">protected void setValues(int[])</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.ReadablePeriod" name="DUMMY_PERIOD" signature="DUMMY_PERIOD" full-signature="org.joda.time.base.BasePeriod.DUMMY_PERIOD">private static final org.joda.time.ReadablePeriod DUMMY_PERIOD</declaration>
            </new-fields>
            <new-constructors>
                <declaration visibility="protected" signature="BasePeriod(long)" full-signature="org.joda.time.base.BasePeriod.BasePeriod(long)" throws="">protected BasePeriod(long)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.base.BasePeriod.static {}" throws="">static {}</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.base.BaseSingleFieldPeriod</name>
            <modified-fields>
                <feature>
                    <name>org.joda.time.base.BaseSingleFieldPeriod.iPeriod</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="int" name="iPeriod" signature="iPeriod" full-signature="org.joda.time.base.BaseSingleFieldPeriod.iPeriod">private int iPeriod</old-declaration>
                        <new-declaration visibility="private" volatile="yes" type="int" name="iPeriod" signature="iPeriod" full-signature="org.joda.time.base.BaseSingleFieldPeriod.iPeriod">private volatile int iPeriod</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.base.BaseSingleFieldPeriod.between(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.ReadablePeriod)</name>
                    <modified-code visibility="protected" static="yes" return-type="int" signature="between(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.ReadablePeriod)" full-signature="org.joda.time.base.BaseSingleFieldPeriod.between(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.ReadablePeriod)" throws="">protected static int between(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial, org.joda.time.ReadablePeriod)</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="long" name="START_1972" signature="START_1972" full-signature="org.joda.time.base.BaseSingleFieldPeriod.START_1972" value="63072000000">private static final long START_1972</declaration>
            </new-fields>
        </class>
        <class>
            <name>org.joda.time.chrono.BaseChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.BaseChronology.validate(org.joda.time.ReadablePartial, int[])</name>
                    <modified-code visibility="public" return-type="void" signature="validate(org.joda.time.ReadablePartial, int[])" full-signature="org.joda.time.chrono.BaseChronology.validate(org.joda.time.ReadablePartial, int[])" throws="">public void validate(org.joda.time.ReadablePartial, int[])</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.BasicChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.BasicChronology.assemble(org.joda.time.chrono.AssembledChronology$Fields)</name>
                    <modified-code visibility="protected" return-type="void" signature="assemble(org.joda.time.chrono.AssembledChronology$Fields)" full-signature="org.joda.time.chrono.BasicChronology.assemble(org.joda.time.chrono.AssembledChronology$Fields)" throws="">protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.BasicChronology.equals(java.lang.Object)</name>
                    <modified-code visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.chrono.BasicChronology.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.BasicChronology.getDateTimeMillis(int, int, int, int)</name>
                    <modified-code visibility="public" return-type="long" signature="getDateTimeMillis(int, int, int, int)" full-signature="org.joda.time.chrono.BasicChronology.getDateTimeMillis(int, int, int, int)" throws="java.lang.IllegalArgumentException">public long getDateTimeMillis(int, int, int, int) throws java.lang.IllegalArgumentException</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.BasicChronology.toString()</name>
                    <modified-code visibility="public" return-type="java.lang.String" signature="toString()" full-signature="org.joda.time.chrono.BasicChronology.toString()" throws="">public java.lang.String toString()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.BasicGJChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet(long, int)</name>
                    <modified-code visibility="package" return-type="int" signature="getDaysInMonthMaxForSet(long, int)" full-signature="org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet(long, int)" throws="">int getDaysInMonthMaxForSet(long, int)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.BasicMonthOfYearDateTimeField</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(org.joda.time.ReadablePartial, int, int[], int)</name>
                    <modified-code visibility="public" return-type="int[]" signature="add(org.joda.time.ReadablePartial, int, int[], int)" full-signature="org.joda.time.chrono.BasicMonthOfYearDateTimeField.add(org.joda.time.ReadablePartial, int, int[], int)" throws="">public int[] add(org.joda.time.ReadablePartial, int, int[], int)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.BuddhistChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.BuddhistChronology.assemble(org.joda.time.chrono.AssembledChronology$Fields)</name>
                    <modified-code visibility="protected" return-type="void" signature="assemble(org.joda.time.chrono.AssembledChronology$Fields)" full-signature="org.joda.time.chrono.BuddhistChronology.assemble(org.joda.time.chrono.AssembledChronology$Fields)" throws="">protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.BuddhistChronology.equals(java.lang.Object)</name>
                    <modified-code visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.chrono.BuddhistChronology.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.BuddhistChronology.getInstance(org.joda.time.DateTimeZone)</name>
                    <modified-code visibility="public" static="yes" synchronized="yes" return-type="org.joda.time.chrono.BuddhistChronology" signature="getInstance(org.joda.time.DateTimeZone)" full-signature="org.joda.time.chrono.BuddhistChronology.getInstance(org.joda.time.DateTimeZone)" throws="">public static synchronized org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.GJChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.GJChronology.assemble(org.joda.time.chrono.AssembledChronology$Fields)</name>
                    <modified-code visibility="protected" return-type="void" signature="assemble(org.joda.time.chrono.AssembledChronology$Fields)" full-signature="org.joda.time.chrono.GJChronology.assemble(org.joda.time.chrono.AssembledChronology$Fields)" throws="">protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.GJChronology.equals(java.lang.Object)</name>
                    <modified-code visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.chrono.GJChronology.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.GJChronology.getDateTimeMillis(int, int, int, int, int, int, int)</name>
                    <modified-code visibility="public" return-type="long" signature="getDateTimeMillis(int, int, int, int, int, int, int)" full-signature="org.joda.time.chrono.GJChronology.getDateTimeMillis(int, int, int, int, int, int, int)" throws="java.lang.IllegalArgumentException">public long getDateTimeMillis(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.GJChronology.getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant, int)</name>
                    <modified-code visibility="public" static="yes" synchronized="yes" return-type="org.joda.time.chrono.GJChronology" signature="getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant, int)" full-signature="org.joda.time.chrono.GJChronology.getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant, int)" throws="">public static synchronized org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone, org.joda.time.ReadableInstant, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.GJChronology.hashCode()</name>
                    <modified-code visibility="public" return-type="int" signature="hashCode()" full-signature="org.joda.time.chrono.GJChronology.hashCode()" throws="">public int hashCode()</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="package" static="yes" synthetic="yes" return-type="org.joda.time.chrono.GregorianChronology" signature="access$100(org.joda.time.chrono.GJChronology)" full-signature="org.joda.time.chrono.GJChronology.access$100(org.joda.time.chrono.GJChronology)" throws="">static org.joda.time.chrono.GregorianChronology access$100(org.joda.time.chrono.GJChronology)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.GJChronology$CutoverField</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.chrono.GJChronology$CutoverField.GJChronology$CutoverField(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, long, boolean)</name>
                    <modified-code visibility="package" signature="GJChronology$CutoverField(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, long, boolean)" full-signature="org.joda.time.chrono.GJChronology$CutoverField.GJChronology$CutoverField(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, long, boolean)" throws="">GJChronology$CutoverField(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, long, boolean)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.GJChronology$CutoverField.set(long, int)</name>
                    <modified-code visibility="public" return-type="long" signature="set(long, int)" full-signature="org.joda.time.chrono.GJChronology$CutoverField.set(long, int)" throws="">public long set(long, int)</modified-code>
                </feature>
            </modified-methods>
            <new-constructors>
                <declaration visibility="package" signature="GJChronology$CutoverField(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, org.joda.time.DurationField, long, boolean)" full-signature="org.joda.time.chrono.GJChronology$CutoverField.GJChronology$CutoverField(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, org.joda.time.DurationField, long, boolean)" throws="">GJChronology$CutoverField(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, org.joda.time.DurationField, long, boolean)</declaration>
            </new-constructors>
        </class>
        <class>
            <name>org.joda.time.chrono.GJChronology$ImpreciseCutoverField</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long, int)</name>
                    <modified-code visibility="public" return-type="long" signature="add(long, int)" full-signature="org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long, int)" throws="">public long add(long, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long, long)</name>
                    <modified-code visibility="public" return-type="long" signature="add(long, long)" full-signature="org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add(long, long)" throws="">public long add(long, long)</modified-code>
                </feature>
            </modified-methods>
            <new-constructors>
                <declaration visibility="package" signature="GJChronology$ImpreciseCutoverField(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DurationField, long)" full-signature="org.joda.time.chrono.GJChronology$ImpreciseCutoverField.GJChronology$ImpreciseCutoverField(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DurationField, long)" throws="">GJChronology$ImpreciseCutoverField(org.joda.time.chrono.GJChronology, org.joda.time.DateTimeField, org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DurationField, long)</declaration>
            </new-constructors>
        </class>
        <class>
            <name>org.joda.time.chrono.GJLocaleSymbols</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.chrono.GJLocaleSymbols.GJLocaleSymbols(java.util.Locale)</name>
                    <modified-code visibility="private" signature="GJLocaleSymbols(java.util.Locale)" full-signature="org.joda.time.chrono.GJLocaleSymbols.GJLocaleSymbols(java.util.Locale)" throws="">private GJLocaleSymbols(java.util.Locale)</modified-code>
                </feature>
            </modified-constructors>
        </class>
        <class>
            <name>org.joda.time.chrono.GJYearOfEraDateTimeField</name>
            <new-methods>
                <declaration visibility="public" return-type="org.joda.time.DurationField" signature="getRangeDurationField()" full-signature="org.joda.time.chrono.GJYearOfEraDateTimeField.getRangeDurationField()" throws="">public org.joda.time.DurationField getRangeDurationField()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.ISOChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.ISOChronology.assemble(org.joda.time.chrono.AssembledChronology$Fields)</name>
                    <modified-code visibility="protected" return-type="void" signature="assemble(org.joda.time.chrono.AssembledChronology$Fields)" full-signature="org.joda.time.chrono.ISOChronology.assemble(org.joda.time.chrono.AssembledChronology$Fields)" throws="">protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.ISOChronology.equals(java.lang.Object)</name>
                    <modified-code visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.chrono.ISOChronology.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.ISOYearOfEraDateTimeField</name>
            <new-methods>
                <declaration visibility="public" return-type="org.joda.time.DurationField" signature="getRangeDurationField()" full-signature="org.joda.time.chrono.ISOYearOfEraDateTimeField.getRangeDurationField()" throws="">public org.joda.time.DurationField getRangeDurationField()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.IslamicChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)</name>
                    <modified-code visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.IslamicChronology.hashCode()</name>
                    <modified-code visibility="public" return-type="int" signature="hashCode()" full-signature="org.joda.time.chrono.IslamicChronology.hashCode()" throws="">public int hashCode()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.IslamicChronology$LeapYearPatternType</name>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.chrono.IslamicChronology$LeapYearPatternType.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</declaration>
                <declaration visibility="public" return-type="int" signature="hashCode()" full-signature="org.joda.time.chrono.IslamicChronology$LeapYearPatternType.hashCode()" throws="">public int hashCode()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.JulianChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.JulianChronology.adjustYearForSet(int)</name>
                    <modified-code visibility="package" static="yes" return-type="int" signature="adjustYearForSet(int)" full-signature="org.joda.time.chrono.JulianChronology.adjustYearForSet(int)" throws="">static int adjustYearForSet(int)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.TestAll</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.TestAll.suite()</name>
                    <modified-code visibility="public" static="yes" return-type="junit.framework.Test" signature="suite()" full-signature="org.joda.time.chrono.TestAll.suite()" throws="">public static junit.framework.Test suite()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.TestBuddhistChronology</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.Chronology" name="COPTIC_UTC" signature="COPTIC_UTC" full-signature="org.joda.time.chrono.TestBuddhistChronology.COPTIC_UTC">private static final org.joda.time.Chronology COPTIC_UTC</declaration>
            </removed-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.TestBuddhistChronology.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.chrono.TestBuddhistChronology.static {}" throws="">static {}</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestBuddhistChronology.testCalendar()</name>
                    <modified-code visibility="public" return-type="void" signature="testCalendar()" full-signature="org.joda.time.chrono.TestBuddhistChronology.testCalendar()" throws="">public void testCalendar()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestBuddhistChronology.testDateFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDateFields()" full-signature="org.joda.time.chrono.TestBuddhistChronology.testDateFields()" throws="">public void testDateFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestBuddhistChronology.testDurationFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDurationFields()" full-signature="org.joda.time.chrono.TestBuddhistChronology.testDurationFields()" throws="">public void testDurationFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestBuddhistChronology.testTimeFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testTimeFields()" full-signature="org.joda.time.chrono.TestBuddhistChronology.testTimeFields()" throws="">public void testTimeFields()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.TestCopticChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.TestCopticChronology.testDateFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDateFields()" full-signature="org.joda.time.chrono.TestCopticChronology.testDateFields()" throws="">public void testDateFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestCopticChronology.testDurationFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDurationFields()" full-signature="org.joda.time.chrono.TestCopticChronology.testDurationFields()" throws="">public void testDurationFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestCopticChronology.testTimeFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testTimeFields()" full-signature="org.joda.time.chrono.TestCopticChronology.testTimeFields()" throws="">public void testTimeFields()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.TestEthiopicChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.TestEthiopicChronology.testDateFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDateFields()" full-signature="org.joda.time.chrono.TestEthiopicChronology.testDateFields()" throws="">public void testDateFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestEthiopicChronology.testDurationFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDurationFields()" full-signature="org.joda.time.chrono.TestEthiopicChronology.testDurationFields()" throws="">public void testDurationFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestEthiopicChronology.testTimeFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testTimeFields()" full-signature="org.joda.time.chrono.TestEthiopicChronology.testTimeFields()" throws="">public void testTimeFields()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.TestGJChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.TestGJChronology.testDateFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDateFields()" full-signature="org.joda.time.chrono.TestGJChronology.testDateFields()" throws="">public void testDateFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestGJChronology.testDurationFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDurationFields()" full-signature="org.joda.time.chrono.TestGJChronology.testDurationFields()" throws="">public void testDurationFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestGJChronology.testTimeFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testTimeFields()" full-signature="org.joda.time.chrono.TestGJChronology.testTimeFields()" throws="">public void testTimeFields()</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testLeapYearRulesConstruction()" full-signature="org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstruction()" throws="">public void testLeapYearRulesConstruction()</declaration>
                <declaration visibility="public" return-type="void" signature="testLeapYearRulesConstructionInvalid()" full-signature="org.joda.time.chrono.TestGJChronology.testLeapYearRulesConstructionInvalid()" throws="">public void testLeapYearRulesConstructionInvalid()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.TestGregorianChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.TestGregorianChronology.testDateFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDateFields()" full-signature="org.joda.time.chrono.TestGregorianChronology.testDateFields()" throws="">public void testDateFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestGregorianChronology.testDurationFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDurationFields()" full-signature="org.joda.time.chrono.TestGregorianChronology.testDurationFields()" throws="">public void testDurationFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestGregorianChronology.testTimeFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testTimeFields()" full-signature="org.joda.time.chrono.TestGregorianChronology.testTimeFields()" throws="">public void testTimeFields()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.TestISOChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.TestISOChronology.testDateFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDateFields()" full-signature="org.joda.time.chrono.TestISOChronology.testDateFields()" throws="">public void testDateFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestISOChronology.testDurationFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDurationFields()" full-signature="org.joda.time.chrono.TestISOChronology.testDurationFields()" throws="">public void testDurationFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestISOChronology.testTimeFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testTimeFields()" full-signature="org.joda.time.chrono.TestISOChronology.testTimeFields()" throws="">public void testTimeFields()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.TestIslamicChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.TestIslamicChronology.testDateFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDateFields()" full-signature="org.joda.time.chrono.TestIslamicChronology.testDateFields()" throws="">public void testDateFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestIslamicChronology.testDurationFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDurationFields()" full-signature="org.joda.time.chrono.TestIslamicChronology.testDurationFields()" throws="">public void testDurationFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestIslamicChronology.testTimeFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testTimeFields()" full-signature="org.joda.time.chrono.TestIslamicChronology.testTimeFields()" throws="">public void testTimeFields()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.TestJulianChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.TestJulianChronology.testDateFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDateFields()" full-signature="org.joda.time.chrono.TestJulianChronology.testDateFields()" throws="">public void testDateFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestJulianChronology.testDurationFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testDurationFields()" full-signature="org.joda.time.chrono.TestJulianChronology.testDurationFields()" throws="">public void testDurationFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.TestJulianChronology.testTimeFields()</name>
                    <modified-code visibility="public" return-type="void" signature="testTimeFields()" full-signature="org.joda.time.chrono.TestJulianChronology.testTimeFields()" throws="">public void testTimeFields()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.TestLenientChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.TestLenientChronology.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.chrono.TestLenientChronology.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.ZonedChronology</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.ZonedChronology.localToUTC(long)</name>
                    <modified-code visibility="private" return-type="long" signature="localToUTC(long)" full-signature="org.joda.time.chrono.ZonedChronology.localToUTC(long)" throws="">private long localToUTC(long)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.ZonedChronology$ZonedDateTimeField</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.add(long, int)</name>
                    <modified-code visibility="public" return-type="long" signature="add(long, int)" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.add(long, int)" throws="">public long add(long, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.add(long, long)</name>
                    <modified-code visibility="public" return-type="long" signature="add(long, long)" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.add(long, long)" throws="">public long add(long, long)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.addWrapField(long, int)</name>
                    <modified-code visibility="public" return-type="long" signature="addWrapField(long, int)" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.addWrapField(long, int)" throws="">public long addWrapField(long, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling(long)</name>
                    <modified-code visibility="public" return-type="long" signature="roundCeiling(long)" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling(long)" throws="">public long roundCeiling(long)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor(long)</name>
                    <modified-code visibility="public" return-type="long" signature="roundFloor(long)" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor(long)" throws="">public long roundFloor(long)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set(long, int)</name>
                    <modified-code visibility="public" return-type="long" signature="set(long, int)" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set(long, int)" throws="">public long set(long, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set(long, java.lang.String, java.util.Locale)</name>
                    <modified-code visibility="public" return-type="long" signature="set(long, java.lang.String, java.util.Locale)" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set(long, java.lang.String, java.util.Locale)" throws="">public long set(long, java.lang.String, java.util.Locale)</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</declaration>
                <declaration visibility="public" return-type="int" signature="hashCode()" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.hashCode()" throws="">public int hashCode()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.chrono.ZonedChronology$ZonedDurationField</name>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDurationField.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</declaration>
                <declaration visibility="public" return-type="int" signature="hashCode()" full-signature="org.joda.time.chrono.ZonedChronology$ZonedDurationField.hashCode()" throws="">public int hashCode()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.convert.ConverterSet</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.convert.ConverterSet.selectSlow(org.joda.time.convert.ConverterSet, java.lang.Class)</name>
                    <modified-code visibility="private" static="yes" return-type="org.joda.time.convert.Converter" signature="selectSlow(org.joda.time.convert.ConverterSet, java.lang.Class)" full-signature="org.joda.time.convert.ConverterSet.selectSlow(org.joda.time.convert.ConverterSet, java.lang.Class)" throws="">private static org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet, java.lang.Class)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.convert.StringConverter</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.convert.StringConverter.getDurationMillis(java.lang.Object)</name>
                    <modified-code visibility="public" return-type="long" signature="getDurationMillis(java.lang.Object)" full-signature="org.joda.time.convert.StringConverter.getDurationMillis(java.lang.Object)" throws="">public long getDurationMillis(java.lang.Object)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.convert.TestReadableDurationConverter</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.convert.TestReadableDurationConverter.setUp()</name>
                    <modified-code visibility="protected" return-type="void" signature="setUp()" full-signature="org.joda.time.convert.TestReadableDurationConverter.setUp()" throws="java.lang.Exception">protected void setUp() throws java.lang.Exception</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="protected" return-type="void" signature="tearDown()" full-signature="org.joda.time.convert.TestReadableDurationConverter.tearDown()" throws="java.lang.Exception">protected void tearDown() throws java.lang.Exception</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.convert.TestStringConverter</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.convert.TestStringConverter.testGetDurationMillis_Object1()</name>
                    <modified-code visibility="public" return-type="void" signature="testGetDurationMillis_Object1()" full-signature="org.joda.time.convert.TestStringConverter.testGetDurationMillis_Object1()" throws="java.lang.Exception">public void testGetDurationMillis_Object1() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.convert.TestStringConverter.testGetDurationMillis_Object2()</name>
                    <modified-code visibility="public" return-type="void" signature="testGetDurationMillis_Object2()" full-signature="org.joda.time.convert.TestStringConverter.testGetDurationMillis_Object2()" throws="java.lang.Exception">public void testGetDurationMillis_Object2() throws java.lang.Exception</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.field.DelegatedDateTimeField</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.field.DelegatedDateTimeField.DelegatedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType)</name>
                    <modified-code visibility="public" signature="DelegatedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType)" full-signature="org.joda.time.field.DelegatedDateTimeField.DelegatedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType)" throws="">public DelegatedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.field.DelegatedDateTimeField.getRangeDurationField()</name>
                    <modified-code visibility="public" return-type="org.joda.time.DurationField" signature="getRangeDurationField()" full-signature="org.joda.time.field.DelegatedDateTimeField.getRangeDurationField()" throws="">public org.joda.time.DurationField getRangeDurationField()</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" final="yes" type="org.joda.time.DurationField" name="iRangeDurationField" signature="iRangeDurationField" full-signature="org.joda.time.field.DelegatedDateTimeField.iRangeDurationField">private final org.joda.time.DurationField iRangeDurationField</declaration>
            </new-fields>
            <new-constructors>
                <declaration visibility="public" signature="DelegatedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)" full-signature="org.joda.time.field.DelegatedDateTimeField.DelegatedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)" throws="">public DelegatedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)</declaration>
            </new-constructors>
        </class>
        <class>
            <name>org.joda.time.field.DelegatedDurationField</name>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.field.DelegatedDurationField.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</declaration>
                <declaration visibility="public" return-type="int" signature="hashCode()" full-signature="org.joda.time.field.DelegatedDurationField.hashCode()" throws="">public int hashCode()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.field.DividedDateTimeField</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.field.DividedDateTimeField.DividedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)</name>
                    <modified-code visibility="public" signature="DividedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)" full-signature="org.joda.time.field.DividedDateTimeField.DividedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)" throws="">public DividedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.field.DividedDateTimeField.DividedDateTimeField(org.joda.time.field.RemainderDateTimeField, org.joda.time.DateTimeFieldType)</name>
                    <modified-code visibility="public" signature="DividedDateTimeField(org.joda.time.field.RemainderDateTimeField, org.joda.time.DateTimeFieldType)" full-signature="org.joda.time.field.DividedDateTimeField.DividedDateTimeField(org.joda.time.field.RemainderDateTimeField, org.joda.time.DateTimeFieldType)" throws="">public DividedDateTimeField(org.joda.time.field.RemainderDateTimeField, org.joda.time.DateTimeFieldType)</modified-code>
                </feature>
            </modified-constructors>
            <new-fields>
                <declaration visibility="package" final="yes" type="org.joda.time.DurationField" name="iRangeDurationField" signature="iRangeDurationField" full-signature="org.joda.time.field.DividedDateTimeField.iRangeDurationField">final org.joda.time.DurationField iRangeDurationField</declaration>
            </new-fields>
            <new-constructors>
                <declaration visibility="public" signature="DividedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType, int)" full-signature="org.joda.time.field.DividedDateTimeField.DividedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType, int)" throws="">public DividedDateTimeField(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType, int)</declaration>
                <declaration visibility="public" signature="DividedDateTimeField(org.joda.time.field.RemainderDateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)" full-signature="org.joda.time.field.DividedDateTimeField.DividedDateTimeField(org.joda.time.field.RemainderDateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)" throws="">public DividedDateTimeField(org.joda.time.field.RemainderDateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="org.joda.time.DurationField" signature="getRangeDurationField()" full-signature="org.joda.time.field.DividedDateTimeField.getRangeDurationField()" throws="">public org.joda.time.DurationField getRangeDurationField()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.field.FieldUtils</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.field.FieldUtils.safeMultiply(int, int)</name>
                    <modified-code visibility="public" static="yes" return-type="int" signature="safeMultiply(int, int)" full-signature="org.joda.time.field.FieldUtils.safeMultiply(int, int)" throws="">public static int safeMultiply(int, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.field.FieldUtils.safeMultiply(long, int)</name>
                    <modified-code visibility="public" static="yes" return-type="long" signature="safeMultiply(long, int)" full-signature="org.joda.time.field.FieldUtils.safeMultiply(long, int)" throws="">public static long safeMultiply(long, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.field.FieldUtils.safeMultiply(long, long)</name>
                    <modified-code visibility="public" static="yes" return-type="long" signature="safeMultiply(long, long)" full-signature="org.joda.time.field.FieldUtils.safeMultiply(long, long)" throws="">public static long safeMultiply(long, long)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.field.FieldUtils.verifyValueBounds(java.lang.String, int, int, int)</name>
                    <modified-code visibility="public" static="yes" return-type="void" signature="verifyValueBounds(java.lang.String, int, int, int)" full-signature="org.joda.time.field.FieldUtils.verifyValueBounds(java.lang.String, int, int, int)" throws="">public static void verifyValueBounds(java.lang.String, int, int, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.field.FieldUtils.verifyValueBounds(org.joda.time.DateTimeField, int, int, int)</name>
                    <modified-code visibility="public" static="yes" return-type="void" signature="verifyValueBounds(org.joda.time.DateTimeField, int, int, int)" full-signature="org.joda.time.field.FieldUtils.verifyValueBounds(org.joda.time.DateTimeField, int, int, int)" throws="">public static void verifyValueBounds(org.joda.time.DateTimeField, int, int, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.field.FieldUtils.verifyValueBounds(org.joda.time.DateTimeFieldType, int, int, int)</name>
                    <modified-code visibility="public" static="yes" return-type="void" signature="verifyValueBounds(org.joda.time.DateTimeFieldType, int, int, int)" full-signature="org.joda.time.field.FieldUtils.verifyValueBounds(org.joda.time.DateTimeFieldType, int, int, int)" throws="">public static void verifyValueBounds(org.joda.time.DateTimeFieldType, int, int, int)</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" static="yes" return-type="long" signature="safeDivide(long, long)" full-signature="org.joda.time.field.FieldUtils.safeDivide(long, long)" throws="">public static long safeDivide(long, long)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.field.LenientDateTimeField</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.field.LenientDateTimeField.set(long, int)</name>
                    <modified-code visibility="public" return-type="long" signature="set(long, int)" full-signature="org.joda.time.field.LenientDateTimeField.set(long, int)" throws="">public long set(long, int)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.field.MillisDurationField</name>
            <new-methods>
                <declaration visibility="public" return-type="boolean" signature="equals(java.lang.Object)" full-signature="org.joda.time.field.MillisDurationField.equals(java.lang.Object)" throws="">public boolean equals(java.lang.Object)</declaration>
                <declaration visibility="public" return-type="int" signature="hashCode()" full-signature="org.joda.time.field.MillisDurationField.hashCode()" throws="">public int hashCode()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.field.RemainderDateTimeField</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)</name>
                    <modified-code visibility="public" signature="RemainderDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)" full-signature="org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)" throws="">public RemainderDateTimeField(org.joda.time.DateTimeField, org.joda.time.DateTimeFieldType, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.field.DividedDateTimeField, org.joda.time.DateTimeFieldType)</name>
                    <modified-code visibility="public" signature="RemainderDateTimeField(org.joda.time.field.DividedDateTimeField, org.joda.time.DateTimeFieldType)" full-signature="org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.field.DividedDateTimeField, org.joda.time.DateTimeFieldType)" throws="">public RemainderDateTimeField(org.joda.time.field.DividedDateTimeField, org.joda.time.DateTimeFieldType)</modified-code>
                </feature>
            </modified-constructors>
            <new-fields>
                <declaration visibility="package" final="yes" type="org.joda.time.DurationField" name="iDurationField" signature="iDurationField" full-signature="org.joda.time.field.RemainderDateTimeField.iDurationField">final org.joda.time.DurationField iDurationField</declaration>
            </new-fields>
            <new-constructors>
                <declaration visibility="public" signature="RemainderDateTimeField(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType, int)" full-signature="org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType, int)" throws="">public RemainderDateTimeField(org.joda.time.DateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType, int)</declaration>
                <declaration visibility="public" signature="RemainderDateTimeField(org.joda.time.field.DividedDateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)" full-signature="org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField(org.joda.time.field.DividedDateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)" throws="">public RemainderDateTimeField(org.joda.time.field.DividedDateTimeField, org.joda.time.DurationField, org.joda.time.DateTimeFieldType)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="org.joda.time.DurationField" signature="getDurationField()" full-signature="org.joda.time.field.RemainderDateTimeField.getDurationField()" throws="">public org.joda.time.DurationField getDurationField()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.field.SkipDateTimeField</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.field.SkipDateTimeField.set(long, int)</name>
                    <modified-code visibility="public" return-type="long" signature="set(long, int)" full-signature="org.joda.time.field.SkipDateTimeField.set(long, int)" throws="">public long set(long, int)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.field.TestFieldUtils</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testSafeDivideLongLong()" full-signature="org.joda.time.field.TestFieldUtils.testSafeDivideLongLong()" throws="">public void testSafeDivideLongLong()</declaration>
                <declaration visibility="public" return-type="void" signature="testSafeMultiplyLongInt()" full-signature="org.joda.time.field.TestFieldUtils.testSafeMultiplyLongInt()" throws="">public void testSafeMultiplyLongInt()</declaration>
                <declaration visibility="public" return-type="void" signature="testSafeMultiplyLongLong()" full-signature="org.joda.time.field.TestFieldUtils.testSafeMultiplyLongLong()" throws="">public void testSafeMultiplyLongLong()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.field.UnsupportedDurationField</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.field.UnsupportedDurationField.compareTo(org.joda.time.DurationField)</name>
                    <modified-code visibility="public" return-type="int" signature="compareTo(org.joda.time.DurationField)" full-signature="org.joda.time.field.UnsupportedDurationField.compareTo(org.joda.time.DurationField)" throws="">public int compareTo(org.joda.time.DurationField)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.format.DateTimeFormat</name>
            <removed-fields>
                <declaration visibility="private" static="yes" final="yes" type="java.util.Map" name="cPatternedCache" signature="cPatternedCache" full-signature="org.joda.time.format.DateTimeFormat.cPatternedCache">private static final java.util.Map cPatternedCache</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.format.DateTimeFormatter[]" name="cStyleCache" signature="cStyleCache" full-signature="org.joda.time.format.DateTimeFormat.cStyleCache">private static final org.joda.time.format.DateTimeFormatter[] cStyleCache</declaration>
            </removed-fields>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.DateTimeFormat.createFormatterForPattern(java.lang.String)</name>
                    <modified-code visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="createFormatterForPattern(java.lang.String)" full-signature="org.joda.time.format.DateTimeFormat.createFormatterForPattern(java.lang.String)" throws="">private static org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex(int, int)</name>
                    <modified-code visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="createFormatterForStyleIndex(int, int)" full-signature="org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex(int, int)" throws="">private static org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormat.parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)</name>
                    <modified-code visibility="private" static="yes" return-type="void" signature="parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)" full-signature="org.joda.time.format.DateTimeFormat.parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)" throws="">private static void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder, java.lang.String)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormat.parseToken(java.lang.String, int[])</name>
                    <modified-code visibility="private" static="yes" return-type="java.lang.String" signature="parseToken(java.lang.String, int[])" full-signature="org.joda.time.format.DateTimeFormat.parseToken(java.lang.String, int[])" throws="">private static java.lang.String parseToken(java.lang.String, int[])</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormat.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.format.DateTimeFormat.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="java.util.Map" name="PATTERN_CACHE" signature="PATTERN_CACHE" full-signature="org.joda.time.format.DateTimeFormat.PATTERN_CACHE">private static final java.util.Map PATTERN_CACHE</declaration>
                <declaration visibility="private" static="yes" final="yes" type="int" name="PATTERN_CACHE_SIZE" signature="PATTERN_CACHE_SIZE" full-signature="org.joda.time.format.DateTimeFormat.PATTERN_CACHE_SIZE" value="500">private static final int PATTERN_CACHE_SIZE</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.format.DateTimeFormatter[]" name="STYLE_CACHE" signature="STYLE_CACHE" full-signature="org.joda.time.format.DateTimeFormat.STYLE_CACHE">private static final org.joda.time.format.DateTimeFormatter[] STYLE_CACHE</declaration>
            </new-fields>
            <new-methods>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="createDateTimeFormatter(int, int)" full-signature="org.joda.time.format.DateTimeFormat.createDateTimeFormatter(int, int)" throws="">private static org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int, int)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.format.DateTimeFormatter</name>
            <removed-constructors>
                <declaration visibility="private" signature="DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer)" full-signature="org.joda.time.format.DateTimeFormatter.DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer)" throws="">private DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer)</declaration>
            </removed-constructors>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)</name>
                    <modified-code visibility="public" signature="DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)" full-signature="org.joda.time.format.DateTimeFormatter.DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)" throws="">public DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)</name>
                    <modified-code visibility="public" return-type="org.joda.time.DateTime" signature="parseDateTime(java.lang.String)" full-signature="org.joda.time.format.DateTimeFormatter.parseDateTime(java.lang.String)" throws="">public org.joda.time.DateTime parseDateTime(java.lang.String)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int)</name>
                    <modified-code visibility="public" return-type="int" signature="parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int)" full-signature="org.joda.time.format.DateTimeFormatter.parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int)" throws="">public int parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.parseLocalDateTime(java.lang.String)</name>
                    <modified-code visibility="public" return-type="org.joda.time.LocalDateTime" signature="parseLocalDateTime(java.lang.String)" full-signature="org.joda.time.format.DateTimeFormatter.parseLocalDateTime(java.lang.String)" throws="">public org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.parseMillis(java.lang.String)</name>
                    <modified-code visibility="public" return-type="long" signature="parseMillis(java.lang.String)" full-signature="org.joda.time.format.DateTimeFormatter.parseMillis(java.lang.String)" throws="">public long parseMillis(java.lang.String)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.parseMutableDateTime(java.lang.String)</name>
                    <modified-code visibility="public" return-type="org.joda.time.MutableDateTime" signature="parseMutableDateTime(java.lang.String)" full-signature="org.joda.time.format.DateTimeFormatter.parseMutableDateTime(java.lang.String)" throws="">public org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)</name>
                    <modified-code visibility="public" return-type="org.joda.time.format.DateTimeFormatter" signature="withChronology(org.joda.time.Chronology)" full-signature="org.joda.time.format.DateTimeFormatter.withChronology(org.joda.time.Chronology)" throws="">public org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.withLocale(java.util.Locale)</name>
                    <modified-code visibility="public" return-type="org.joda.time.format.DateTimeFormatter" signature="withLocale(java.util.Locale)" full-signature="org.joda.time.format.DateTimeFormatter.withLocale(java.util.Locale)" throws="">public org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.withOffsetParsed()</name>
                    <modified-code visibility="public" return-type="org.joda.time.format.DateTimeFormatter" signature="withOffsetParsed()" full-signature="org.joda.time.format.DateTimeFormatter.withOffsetParsed()" throws="">public org.joda.time.format.DateTimeFormatter withOffsetParsed()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.withPivotYear(int)</name>
                    <modified-code visibility="public" return-type="org.joda.time.format.DateTimeFormatter" signature="withPivotYear(int)" full-signature="org.joda.time.format.DateTimeFormatter.withPivotYear(int)" throws="">public org.joda.time.format.DateTimeFormatter withPivotYear(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.withPivotYear(java.lang.Integer)</name>
                    <modified-code visibility="public" return-type="org.joda.time.format.DateTimeFormatter" signature="withPivotYear(java.lang.Integer)" full-signature="org.joda.time.format.DateTimeFormatter.withPivotYear(java.lang.Integer)" throws="">public org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)</name>
                    <modified-code visibility="public" return-type="org.joda.time.format.DateTimeFormatter" signature="withZone(org.joda.time.DateTimeZone)" full-signature="org.joda.time.format.DateTimeFormatter.withZone(org.joda.time.DateTimeZone)" throws="">public org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" final="yes" type="int" name="iDefaultYear" signature="iDefaultYear" full-signature="org.joda.time.format.DateTimeFormatter.iDefaultYear">private final int iDefaultYear</declaration>
            </new-fields>
            <new-constructors>
                <declaration visibility="private" signature="DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer, int)" full-signature="org.joda.time.format.DateTimeFormatter.DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer, int)" throws="">private DateTimeFormatter(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer, int)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="int" signature="getDefaultYear()" full-signature="org.joda.time.format.DateTimeFormatter.getDefaultYear()" throws="">public int getDefaultYear()</declaration>
                <declaration visibility="public" return-type="org.joda.time.format.DateTimeFormatter" signature="withDefaultYear(int)" full-signature="org.joda.time.format.DateTimeFormatter.withDefaultYear(int)" throws="">public org.joda.time.format.DateTimeFormatter withDefaultYear(int)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.format.DateTimeFormatterBuilder</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneId()</name>
                    <modified-code visibility="public" return-type="org.joda.time.format.DateTimeFormatterBuilder" signature="appendTimeZoneId()" full-signature="org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneId()" throws="">public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneName()</name>
                    <modified-code visibility="public" return-type="org.joda.time.format.DateTimeFormatterBuilder" signature="appendTimeZoneName()" full-signature="org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneName()" throws="">public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName()</name>
                    <modified-code visibility="public" return-type="org.joda.time.format.DateTimeFormatterBuilder" signature="appendTimeZoneShortName()" full-signature="org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName()" throws="">public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName()</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="org.joda.time.format.DateTimeFormatterBuilder" signature="appendTimeZoneName(java.util.Map)" full-signature="org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneName(java.util.Map)" throws="">public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName(java.util.Map)</declaration>
                <declaration visibility="public" return-type="org.joda.time.format.DateTimeFormatterBuilder" signature="appendTimeZoneShortName(java.util.Map)" full-signature="org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName(java.util.Map)" throws="">public org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.format.DateTimeFormatterBuilder$Composite</name>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatterBuilder$Composite.DateTimeFormatterBuilder$Composite(java.util.List)</name>
                    <modified-code visibility="package" signature="DateTimeFormatterBuilder$Composite(java.util.List)" full-signature="org.joda.time.format.DateTimeFormatterBuilder$Composite.DateTimeFormatterBuilder$Composite(java.util.List)" throws="">DateTimeFormatterBuilder$Composite(java.util.List)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose(java.util.List, java.util.List, java.util.List)</name>
                    <modified-code visibility="private" return-type="void" signature="decompose(java.util.List, java.util.List, java.util.List)" full-signature="org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose(java.util.List, java.util.List, java.util.List)" throws="">private void decompose(java.util.List, java.util.List, java.util.List)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.format.DateTimeFormatterBuilder$TextField</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)</name>
                    <modified-code visibility="public" return-type="int" signature="parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" full-signature="org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" throws="">public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName</name>
            <modified-declaration>
                <old-declaration visibility="package" super="yes" name="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" extends="java.lang.Object" implements="org.joda.time.format.DateTimePrinter">class org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName extends java.lang.Object implements org.joda.time.format.DateTimePrinter</old-declaration>
                <new-declaration visibility="package" super="yes" name="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName" extends="java.lang.Object" implements="org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser">class org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName extends java.lang.Object implements org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser</new-declaration>
            </modified-declaration>
            <removed-fields>
                <declaration visibility="package" static="yes" final="yes" type="int" name="ID" signature="ID" full-signature="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.ID" value="2">static final int ID</declaration>
            </removed-fields>
            <removed-constructors>
                <declaration visibility="package" signature="DateTimeFormatterBuilder$TimeZoneName(int)" full-signature="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.DateTimeFormatterBuilder$TimeZoneName(int)" throws="">DateTimeFormatterBuilder$TimeZoneName(int)</declaration>
            </removed-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print(long, org.joda.time.DateTimeZone, java.util.Locale)</name>
                    <modified-code visibility="private" return-type="java.lang.String" signature="print(long, org.joda.time.DateTimeZone, java.util.Locale)" full-signature="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print(long, org.joda.time.DateTimeZone, java.util.Locale)" throws="">private java.lang.String print(long, org.joda.time.DateTimeZone, java.util.Locale)</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" final="yes" type="java.util.Map" name="iParseLookup" signature="iParseLookup" full-signature="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.iParseLookup">private final java.util.Map iParseLookup</declaration>
            </new-fields>
            <new-constructors>
                <declaration visibility="package" signature="DateTimeFormatterBuilder$TimeZoneName(int, java.util.Map)" full-signature="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.DateTimeFormatterBuilder$TimeZoneName(int, java.util.Map)" throws="">DateTimeFormatterBuilder$TimeZoneName(int, java.util.Map)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="public" return-type="int" signature="estimateParsedLength()" full-signature="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimateParsedLength()" throws="">public int estimateParsedLength()</declaration>
                <declaration visibility="public" return-type="int" signature="parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" full-signature="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" throws="">public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)</name>
                    <modified-code visibility="public" return-type="int" signature="parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" full-signature="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)" throws="">public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.format.DateTimeParserBucket</name>
            <removed-methods>
                <declaration visibility="package" static="yes" synthetic="yes" return-type="int" signature="access$102(org.joda.time.format.DateTimeParserBucket, int)" full-signature="org.joda.time.format.DateTimeParserBucket.access$102(org.joda.time.format.DateTimeParserBucket, int)" throws="">static int access$102(org.joda.time.format.DateTimeParserBucket, int)</declaration>
            </removed-methods>
            <deprecated-constructors>
                <declaration visibility="public" deprecated="yes" signature="DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale)" full-signature="org.joda.time.format.DateTimeParserBucket.DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale)" throws="">public DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale)</declaration>
                <declaration visibility="public" deprecated="yes" signature="DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer)" full-signature="org.joda.time.format.DateTimeParserBucket.DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer)" throws="">public DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer)</declaration>
            </deprecated-constructors>
            <deprecated-methods>
                <declaration visibility="public" deprecated="yes" return-type="int" signature="getOffset()" full-signature="org.joda.time.format.DateTimeParserBucket.getOffset()" throws="">public int getOffset()</declaration>
                <declaration visibility="public" deprecated="yes" return-type="void" signature="setOffset(int)" full-signature="org.joda.time.format.DateTimeParserBucket.setOffset(int)" throws="">public void setOffset(int)</declaration>
            </deprecated-methods>
            <modified-fields>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket.iOffset</name>
                    <modified-declaration>
                        <old-declaration visibility="private" type="int" name="iOffset" signature="iOffset" full-signature="org.joda.time.format.DateTimeParserBucket.iOffset">private int iOffset</old-declaration>
                        <new-declaration visibility="private" type="java.lang.Integer" name="iOffset" signature="iOffset" full-signature="org.joda.time.format.DateTimeParserBucket.iOffset">private java.lang.Integer iOffset</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket.DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale)</name>
                    <modified-code visibility="public" deprecated="yes" signature="DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale)" full-signature="org.joda.time.format.DateTimeParserBucket.DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale)" throws="">public DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket.DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer)</name>
                    <modified-code visibility="public" deprecated="yes" signature="DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer)" full-signature="org.joda.time.format.DateTimeParserBucket.DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer)" throws="">public DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket.access$100(org.joda.time.format.DateTimeParserBucket)</name>
                    <modified-declaration>
                        <old-declaration visibility="package" static="yes" synthetic="yes" return-type="int" signature="access$100(org.joda.time.format.DateTimeParserBucket)" full-signature="org.joda.time.format.DateTimeParserBucket.access$100(org.joda.time.format.DateTimeParserBucket)" throws="">static int access$100(org.joda.time.format.DateTimeParserBucket)</old-declaration>
                        <new-declaration visibility="package" static="yes" synthetic="yes" return-type="java.lang.Integer" signature="access$100(org.joda.time.format.DateTimeParserBucket)" full-signature="org.joda.time.format.DateTimeParserBucket.access$100(org.joda.time.format.DateTimeParserBucket)" throws="">static java.lang.Integer access$100(org.joda.time.format.DateTimeParserBucket)</new-declaration>
                    </modified-declaration>
                    <modified-code visibility="package" static="yes" synthetic="yes" return-type="java.lang.Integer" signature="access$100(org.joda.time.format.DateTimeParserBucket)" full-signature="org.joda.time.format.DateTimeParserBucket.access$100(org.joda.time.format.DateTimeParserBucket)" throws="">static java.lang.Integer access$100(org.joda.time.format.DateTimeParserBucket)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket.computeMillis(boolean, java.lang.String)</name>
                    <modified-code visibility="public" return-type="long" signature="computeMillis(boolean, java.lang.String)" full-signature="org.joda.time.format.DateTimeParserBucket.computeMillis(boolean, java.lang.String)" throws="">public long computeMillis(boolean, java.lang.String)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket.getOffset()</name>
                    <modified-code visibility="public" deprecated="yes" return-type="int" signature="getOffset()" full-signature="org.joda.time.format.DateTimeParserBucket.getOffset()" throws="">public int getOffset()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket.setOffset(int)</name>
                    <modified-code visibility="public" deprecated="yes" return-type="void" signature="setOffset(int)" full-signature="org.joda.time.format.DateTimeParserBucket.setOffset(int)" throws="">public void setOffset(int)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket.setZone(org.joda.time.DateTimeZone)</name>
                    <modified-code visibility="public" return-type="void" signature="setZone(org.joda.time.DateTimeZone)" full-signature="org.joda.time.format.DateTimeParserBucket.setZone(org.joda.time.DateTimeZone)" throws="">public void setZone(org.joda.time.DateTimeZone)</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" type="int" name="iDefaultYear" signature="iDefaultYear" full-signature="org.joda.time.format.DateTimeParserBucket.iDefaultYear">private int iDefaultYear</declaration>
            </new-fields>
            <new-constructors>
                <declaration visibility="public" signature="DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer, int)" full-signature="org.joda.time.format.DateTimeParserBucket.DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer, int)" throws="">public DateTimeParserBucket(long, org.joda.time.Chronology, java.util.Locale, java.lang.Integer, int)</declaration>
            </new-constructors>
            <new-methods>
                <declaration visibility="package" static="yes" synthetic="yes" return-type="java.lang.Integer" signature="access$102(org.joda.time.format.DateTimeParserBucket, java.lang.Integer)" full-signature="org.joda.time.format.DateTimeParserBucket.access$102(org.joda.time.format.DateTimeParserBucket, java.lang.Integer)" throws="">static java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket, java.lang.Integer)</declaration>
                <declaration visibility="package" static="yes" return-type="int" signature="compareReverse(org.joda.time.DurationField, org.joda.time.DurationField)" full-signature="org.joda.time.format.DateTimeParserBucket.compareReverse(org.joda.time.DurationField, org.joda.time.DurationField)" throws="">static int compareReverse(org.joda.time.DurationField, org.joda.time.DurationField)</declaration>
                <declaration visibility="public" return-type="java.lang.Integer" signature="getOffsetInteger()" full-signature="org.joda.time.format.DateTimeParserBucket.getOffsetInteger()" throws="">public java.lang.Integer getOffsetInteger()</declaration>
                <declaration visibility="public" return-type="void" signature="setOffset(java.lang.Integer)" full-signature="org.joda.time.format.DateTimeParserBucket.setOffset(java.lang.Integer)" throws="">public void setOffset(java.lang.Integer)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.format.DateTimeParserBucket$SavedField</name>
            <removed-methods>
                <declaration visibility="private" return-type="int" signature="compareReverse(org.joda.time.DurationField, org.joda.time.DurationField)" full-signature="org.joda.time.format.DateTimeParserBucket$SavedField.compareReverse(org.joda.time.DurationField, org.joda.time.DurationField)" throws="">private int compareReverse(org.joda.time.DurationField, org.joda.time.DurationField)</declaration>
            </removed-methods>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket$SavedField.compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)</name>
                    <modified-code visibility="public" return-type="int" signature="compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)" full-signature="org.joda.time.format.DateTimeParserBucket$SavedField.compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)" throws="">public int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.format.DateTimeParserBucket$SavedState</name>
            <modified-fields>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket$SavedState.iOffset</name>
                    <modified-declaration>
                        <old-declaration visibility="package" final="yes" type="int" name="iOffset" signature="iOffset" full-signature="org.joda.time.format.DateTimeParserBucket$SavedState.iOffset">final int iOffset</old-declaration>
                        <new-declaration visibility="package" final="yes" type="java.lang.Integer" name="iOffset" signature="iOffset" full-signature="org.joda.time.format.DateTimeParserBucket$SavedState.iOffset">final java.lang.Integer iOffset</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket$SavedState.DateTimeParserBucket$SavedState(org.joda.time.format.DateTimeParserBucket)</name>
                    <modified-code visibility="package" signature="DateTimeParserBucket$SavedState(org.joda.time.format.DateTimeParserBucket)" full-signature="org.joda.time.format.DateTimeParserBucket$SavedState.DateTimeParserBucket$SavedState(org.joda.time.format.DateTimeParserBucket)" throws="">DateTimeParserBucket$SavedState(org.joda.time.format.DateTimeParserBucket)</modified-code>
                </feature>
            </modified-constructors>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.DateTimeParserBucket$SavedState.restoreState(org.joda.time.format.DateTimeParserBucket)</name>
                    <modified-code visibility="package" return-type="boolean" signature="restoreState(org.joda.time.format.DateTimeParserBucket)" full-signature="org.joda.time.format.DateTimeParserBucket$SavedState.restoreState(org.joda.time.format.DateTimeParserBucket)" throws="">boolean restoreState(org.joda.time.format.DateTimeParserBucket)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.format.ISODateTimeFormat</name>
            <removed-fields>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bd" signature="bd" full-signature="org.joda.time.format.ISODateTimeFormat.bd">private static org.joda.time.format.DateTimeFormatter bd</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bdt" signature="bdt" full-signature="org.joda.time.format.ISODateTimeFormat.bdt">private static org.joda.time.format.DateTimeFormatter bdt</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bdtx" signature="bdtx" full-signature="org.joda.time.format.ISODateTimeFormat.bdtx">private static org.joda.time.format.DateTimeFormatter bdtx</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bod" signature="bod" full-signature="org.joda.time.format.ISODateTimeFormat.bod">private static org.joda.time.format.DateTimeFormatter bod</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bodt" signature="bodt" full-signature="org.joda.time.format.ISODateTimeFormat.bodt">private static org.joda.time.format.DateTimeFormatter bodt</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bodtx" signature="bodtx" full-signature="org.joda.time.format.ISODateTimeFormat.bodtx">private static org.joda.time.format.DateTimeFormatter bodtx</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bt" signature="bt" full-signature="org.joda.time.format.ISODateTimeFormat.bt">private static org.joda.time.format.DateTimeFormatter bt</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="btt" signature="btt" full-signature="org.joda.time.format.ISODateTimeFormat.btt">private static org.joda.time.format.DateTimeFormatter btt</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bttx" signature="bttx" full-signature="org.joda.time.format.ISODateTimeFormat.bttx">private static org.joda.time.format.DateTimeFormatter bttx</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="btx" signature="btx" full-signature="org.joda.time.format.ISODateTimeFormat.btx">private static org.joda.time.format.DateTimeFormatter btx</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bwd" signature="bwd" full-signature="org.joda.time.format.ISODateTimeFormat.bwd">private static org.joda.time.format.DateTimeFormatter bwd</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bwdt" signature="bwdt" full-signature="org.joda.time.format.ISODateTimeFormat.bwdt">private static org.joda.time.format.DateTimeFormatter bwdt</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="bwdtx" signature="bwdtx" full-signature="org.joda.time.format.ISODateTimeFormat.bwdtx">private static org.joda.time.format.DateTimeFormatter bwdtx</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dh" signature="dh" full-signature="org.joda.time.format.ISODateTimeFormat.dh">private static org.joda.time.format.DateTimeFormatter dh</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dhm" signature="dhm" full-signature="org.joda.time.format.ISODateTimeFormat.dhm">private static org.joda.time.format.DateTimeFormatter dhm</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dhms" signature="dhms" full-signature="org.joda.time.format.ISODateTimeFormat.dhms">private static org.joda.time.format.DateTimeFormatter dhms</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dhmsf" signature="dhmsf" full-signature="org.joda.time.format.ISODateTimeFormat.dhmsf">private static org.joda.time.format.DateTimeFormatter dhmsf</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dhmsl" signature="dhmsl" full-signature="org.joda.time.format.ISODateTimeFormat.dhmsl">private static org.joda.time.format.DateTimeFormatter dhmsl</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dme" signature="dme" full-signature="org.joda.time.format.ISODateTimeFormat.dme">private static org.joda.time.format.DateTimeFormatter dme</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dotp" signature="dotp" full-signature="org.joda.time.format.ISODateTimeFormat.dotp">private static org.joda.time.format.DateTimeFormatter dotp</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dp" signature="dp" full-signature="org.joda.time.format.ISODateTimeFormat.dp">private static org.joda.time.format.DateTimeFormatter dp</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dpe" signature="dpe" full-signature="org.joda.time.format.ISODateTimeFormat.dpe">private static org.joda.time.format.DateTimeFormatter dpe</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dt" signature="dt" full-signature="org.joda.time.format.ISODateTimeFormat.dt">private static org.joda.time.format.DateTimeFormatter dt</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dtp" signature="dtp" full-signature="org.joda.time.format.ISODateTimeFormat.dtp">private static org.joda.time.format.DateTimeFormatter dtp</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dtx" signature="dtx" full-signature="org.joda.time.format.ISODateTimeFormat.dtx">private static org.joda.time.format.DateTimeFormatter dtx</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dwe" signature="dwe" full-signature="org.joda.time.format.ISODateTimeFormat.dwe">private static org.joda.time.format.DateTimeFormatter dwe</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="dye" signature="dye" full-signature="org.joda.time.format.ISODateTimeFormat.dye">private static org.joda.time.format.DateTimeFormatter dye</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="fse" signature="fse" full-signature="org.joda.time.format.ISODateTimeFormat.fse">private static org.joda.time.format.DateTimeFormatter fse</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="hde" signature="hde" full-signature="org.joda.time.format.ISODateTimeFormat.hde">private static org.joda.time.format.DateTimeFormatter hde</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="hm" signature="hm" full-signature="org.joda.time.format.ISODateTimeFormat.hm">private static org.joda.time.format.DateTimeFormatter hm</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="hms" signature="hms" full-signature="org.joda.time.format.ISODateTimeFormat.hms">private static org.joda.time.format.DateTimeFormatter hms</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="hmsf" signature="hmsf" full-signature="org.joda.time.format.ISODateTimeFormat.hmsf">private static org.joda.time.format.DateTimeFormatter hmsf</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="hmsl" signature="hmsl" full-signature="org.joda.time.format.ISODateTimeFormat.hmsl">private static org.joda.time.format.DateTimeFormatter hmsl</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="ldotp" signature="ldotp" full-signature="org.joda.time.format.ISODateTimeFormat.ldotp">private static org.joda.time.format.DateTimeFormatter ldotp</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="ldp" signature="ldp" full-signature="org.joda.time.format.ISODateTimeFormat.ldp">private static org.joda.time.format.DateTimeFormatter ldp</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="lte" signature="lte" full-signature="org.joda.time.format.ISODateTimeFormat.lte">private static org.joda.time.format.DateTimeFormatter lte</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="ltp" signature="ltp" full-signature="org.joda.time.format.ISODateTimeFormat.ltp">private static org.joda.time.format.DateTimeFormatter ltp</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="mhe" signature="mhe" full-signature="org.joda.time.format.ISODateTimeFormat.mhe">private static org.joda.time.format.DateTimeFormatter mhe</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="mye" signature="mye" full-signature="org.joda.time.format.ISODateTimeFormat.mye">private static org.joda.time.format.DateTimeFormatter mye</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="od" signature="od" full-signature="org.joda.time.format.ISODateTimeFormat.od">private static org.joda.time.format.DateTimeFormatter od</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="odt" signature="odt" full-signature="org.joda.time.format.ISODateTimeFormat.odt">private static org.joda.time.format.DateTimeFormatter odt</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="odtx" signature="odtx" full-signature="org.joda.time.format.ISODateTimeFormat.odtx">private static org.joda.time.format.DateTimeFormatter odtx</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="sme" signature="sme" full-signature="org.joda.time.format.ISODateTimeFormat.sme">private static org.joda.time.format.DateTimeFormatter sme</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="t" signature="t" full-signature="org.joda.time.format.ISODateTimeFormat.t">private static org.joda.time.format.DateTimeFormatter t</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="tp" signature="tp" full-signature="org.joda.time.format.ISODateTimeFormat.tp">private static org.joda.time.format.DateTimeFormatter tp</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="tpe" signature="tpe" full-signature="org.joda.time.format.ISODateTimeFormat.tpe">private static org.joda.time.format.DateTimeFormatter tpe</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="tt" signature="tt" full-signature="org.joda.time.format.ISODateTimeFormat.tt">private static org.joda.time.format.DateTimeFormatter tt</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="ttx" signature="ttx" full-signature="org.joda.time.format.ISODateTimeFormat.ttx">private static org.joda.time.format.DateTimeFormatter ttx</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="tx" signature="tx" full-signature="org.joda.time.format.ISODateTimeFormat.tx">private static org.joda.time.format.DateTimeFormatter tx</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="wdt" signature="wdt" full-signature="org.joda.time.format.ISODateTimeFormat.wdt">private static org.joda.time.format.DateTimeFormatter wdt</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="wdtx" signature="wdtx" full-signature="org.joda.time.format.ISODateTimeFormat.wdtx">private static org.joda.time.format.DateTimeFormatter wdtx</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="we" signature="we" full-signature="org.joda.time.format.ISODateTimeFormat.we">private static org.joda.time.format.DateTimeFormatter we</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="ww" signature="ww" full-signature="org.joda.time.format.ISODateTimeFormat.ww">private static org.joda.time.format.DateTimeFormatter ww</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="wwd" signature="wwd" full-signature="org.joda.time.format.ISODateTimeFormat.wwd">private static org.joda.time.format.DateTimeFormatter wwd</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="wwe" signature="wwe" full-signature="org.joda.time.format.ISODateTimeFormat.wwe">private static org.joda.time.format.DateTimeFormatter wwe</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="ye" signature="ye" full-signature="org.joda.time.format.ISODateTimeFormat.ye">private static org.joda.time.format.DateTimeFormatter ye</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="ym" signature="ym" full-signature="org.joda.time.format.ISODateTimeFormat.ym">private static org.joda.time.format.DateTimeFormatter ym</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="ymd" signature="ymd" full-signature="org.joda.time.format.ISODateTimeFormat.ymd">private static org.joda.time.format.DateTimeFormatter ymd</declaration>
                <declaration visibility="private" static="yes" type="org.joda.time.format.DateTimeFormatter" name="ze" signature="ze" full-signature="org.joda.time.format.ISODateTimeFormat.ze">private static org.joda.time.format.DateTimeFormatter ze</declaration>
            </removed-fields>
            <removed-methods>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dayOfMonthElement()" full-signature="org.joda.time.format.ISODateTimeFormat.dayOfMonthElement()" throws="">private static org.joda.time.format.DateTimeFormatter dayOfMonthElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dayOfWeekElement()" full-signature="org.joda.time.format.ISODateTimeFormat.dayOfWeekElement()" throws="">private static org.joda.time.format.DateTimeFormatter dayOfWeekElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dayOfYearElement()" full-signature="org.joda.time.format.ISODateTimeFormat.dayOfYearElement()" throws="">private static org.joda.time.format.DateTimeFormatter dayOfYearElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="fractionElement()" full-signature="org.joda.time.format.ISODateTimeFormat.fractionElement()" throws="">private static org.joda.time.format.DateTimeFormatter fractionElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="hourElement()" full-signature="org.joda.time.format.ISODateTimeFormat.hourElement()" throws="">private static org.joda.time.format.DateTimeFormatter hourElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="literalTElement()" full-signature="org.joda.time.format.ISODateTimeFormat.literalTElement()" throws="">private static org.joda.time.format.DateTimeFormatter literalTElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="minuteElement()" full-signature="org.joda.time.format.ISODateTimeFormat.minuteElement()" throws="">private static org.joda.time.format.DateTimeFormatter minuteElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="monthElement()" full-signature="org.joda.time.format.ISODateTimeFormat.monthElement()" throws="">private static org.joda.time.format.DateTimeFormatter monthElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="offsetElement()" full-signature="org.joda.time.format.ISODateTimeFormat.offsetElement()" throws="">private static org.joda.time.format.DateTimeFormatter offsetElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="secondElement()" full-signature="org.joda.time.format.ISODateTimeFormat.secondElement()" throws="">private static org.joda.time.format.DateTimeFormatter secondElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="weekElement()" full-signature="org.joda.time.format.ISODateTimeFormat.weekElement()" throws="">private static org.joda.time.format.DateTimeFormatter weekElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="weekyearElement()" full-signature="org.joda.time.format.ISODateTimeFormat.weekyearElement()" throws="">private static org.joda.time.format.DateTimeFormatter weekyearElement()</declaration>
                <declaration visibility="private" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="yearElement()" full-signature="org.joda.time.format.ISODateTimeFormat.yearElement()" throws="">private static org.joda.time.format.DateTimeFormatter yearElement()</declaration>
            </removed-methods>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicDate()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicDate()" full-signature="org.joda.time.format.ISODateTimeFormat.basicDate()" throws="">public static org.joda.time.format.DateTimeFormatter basicDate()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicDateTime()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicDateTime()" full-signature="org.joda.time.format.ISODateTimeFormat.basicDateTime()" throws="">public static org.joda.time.format.DateTimeFormatter basicDateTime()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicDateTimeNoMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis()" throws="">public static org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicOrdinalDate()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicOrdinalDate()" full-signature="org.joda.time.format.ISODateTimeFormat.basicOrdinalDate()" throws="">public static org.joda.time.format.DateTimeFormatter basicOrdinalDate()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicOrdinalDateTime()" full-signature="org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime()" throws="">public static org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicOrdinalDateTimeNoMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis()" throws="">public static org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicTTime()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicTTime()" full-signature="org.joda.time.format.ISODateTimeFormat.basicTTime()" throws="">public static org.joda.time.format.DateTimeFormatter basicTTime()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicTTimeNoMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicTTimeNoMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.basicTTimeNoMillis()" throws="">public static org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicTime()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicTime()" full-signature="org.joda.time.format.ISODateTimeFormat.basicTime()" throws="">public static org.joda.time.format.DateTimeFormatter basicTime()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicTimeNoMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicTimeNoMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.basicTimeNoMillis()" throws="">public static org.joda.time.format.DateTimeFormatter basicTimeNoMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicWeekDate()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicWeekDate()" full-signature="org.joda.time.format.ISODateTimeFormat.basicWeekDate()" throws="">public static org.joda.time.format.DateTimeFormatter basicWeekDate()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicWeekDateTime()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicWeekDateTime()" full-signature="org.joda.time.format.ISODateTimeFormat.basicWeekDateTime()" throws="">public static org.joda.time.format.DateTimeFormatter basicWeekDateTime()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.basicWeekDateTimeNoMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="basicWeekDateTimeNoMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.basicWeekDateTimeNoMillis()" throws="">public static org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateByMonth(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)</name>
                    <modified-code visibility="private" static="yes" return-type="boolean" signature="dateByMonth(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)" full-signature="org.joda.time.format.ISODateTimeFormat.dateByMonth(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)" throws="">private static boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)</name>
                    <modified-code visibility="private" static="yes" return-type="boolean" signature="dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)" full-signature="org.joda.time.format.ISODateTimeFormat.dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)" throws="">private static boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateByWeek(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)</name>
                    <modified-code visibility="private" static="yes" return-type="boolean" signature="dateByWeek(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)" full-signature="org.joda.time.format.ISODateTimeFormat.dateByWeek(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)" throws="">private static boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder, java.util.Collection, boolean, boolean)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateElementParser()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateElementParser()" full-signature="org.joda.time.format.ISODateTimeFormat.dateElementParser()" throws="">public static org.joda.time.format.DateTimeFormatter dateElementParser()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateHour()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateHour()" full-signature="org.joda.time.format.ISODateTimeFormat.dateHour()" throws="">public static org.joda.time.format.DateTimeFormatter dateHour()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateHourMinute()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateHourMinute()" full-signature="org.joda.time.format.ISODateTimeFormat.dateHourMinute()" throws="">public static org.joda.time.format.DateTimeFormatter dateHourMinute()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateHourMinuteSecond()" full-signature="org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond()" throws="">public static org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateHourMinuteSecondFraction()" full-signature="org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction()" throws="">public static org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateHourMinuteSecondMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondMillis()" throws="">public static org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateOptionalTimeParser()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateOptionalTimeParser()" full-signature="org.joda.time.format.ISODateTimeFormat.dateOptionalTimeParser()" throws="">public static org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateParser()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateParser()" full-signature="org.joda.time.format.ISODateTimeFormat.dateParser()" throws="">public static org.joda.time.format.DateTimeFormatter dateParser()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateTime()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateTime()" full-signature="org.joda.time.format.ISODateTimeFormat.dateTime()" throws="">public static org.joda.time.format.DateTimeFormatter dateTime()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateTimeNoMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis()" throws="">public static org.joda.time.format.DateTimeFormatter dateTimeNoMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.dateTimeParser()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="dateTimeParser()" full-signature="org.joda.time.format.ISODateTimeFormat.dateTimeParser()" throws="">public static org.joda.time.format.DateTimeFormatter dateTimeParser()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.forFields(java.util.Collection, boolean, boolean)</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="forFields(java.util.Collection, boolean, boolean)" full-signature="org.joda.time.format.ISODateTimeFormat.forFields(java.util.Collection, boolean, boolean)" throws="">public static org.joda.time.format.DateTimeFormatter forFields(java.util.Collection, boolean, boolean)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.hour()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="hour()" full-signature="org.joda.time.format.ISODateTimeFormat.hour()" throws="">public static org.joda.time.format.DateTimeFormatter hour()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.hourMinute()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="hourMinute()" full-signature="org.joda.time.format.ISODateTimeFormat.hourMinute()" throws="">public static org.joda.time.format.DateTimeFormatter hourMinute()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.hourMinuteSecond()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="hourMinuteSecond()" full-signature="org.joda.time.format.ISODateTimeFormat.hourMinuteSecond()" throws="">public static org.joda.time.format.DateTimeFormatter hourMinuteSecond()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="hourMinuteSecondFraction()" full-signature="org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction()" throws="">public static org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.hourMinuteSecondMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="hourMinuteSecondMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.hourMinuteSecondMillis()" throws="">public static org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="localDateOptionalTimeParser()" full-signature="org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser()" throws="">public static org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.localDateParser()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="localDateParser()" full-signature="org.joda.time.format.ISODateTimeFormat.localDateParser()" throws="">public static org.joda.time.format.DateTimeFormatter localDateParser()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.localTimeParser()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="localTimeParser()" full-signature="org.joda.time.format.ISODateTimeFormat.localTimeParser()" throws="">public static org.joda.time.format.DateTimeFormatter localTimeParser()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.ordinalDate()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="ordinalDate()" full-signature="org.joda.time.format.ISODateTimeFormat.ordinalDate()" throws="">public static org.joda.time.format.DateTimeFormatter ordinalDate()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.ordinalDateTime()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="ordinalDateTime()" full-signature="org.joda.time.format.ISODateTimeFormat.ordinalDateTime()" throws="">public static org.joda.time.format.DateTimeFormatter ordinalDateTime()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.ordinalDateTimeNoMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="ordinalDateTimeNoMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.ordinalDateTimeNoMillis()" throws="">public static org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.tTime()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="tTime()" full-signature="org.joda.time.format.ISODateTimeFormat.tTime()" throws="">public static org.joda.time.format.DateTimeFormatter tTime()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.tTimeNoMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="tTimeNoMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.tTimeNoMillis()" throws="">public static org.joda.time.format.DateTimeFormatter tTimeNoMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.time()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="time()" full-signature="org.joda.time.format.ISODateTimeFormat.time()" throws="">public static org.joda.time.format.DateTimeFormatter time()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.timeElementParser()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="timeElementParser()" full-signature="org.joda.time.format.ISODateTimeFormat.timeElementParser()" throws="">public static org.joda.time.format.DateTimeFormatter timeElementParser()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.timeNoMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="timeNoMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.timeNoMillis()" throws="">public static org.joda.time.format.DateTimeFormatter timeNoMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.timeParser()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="timeParser()" full-signature="org.joda.time.format.ISODateTimeFormat.timeParser()" throws="">public static org.joda.time.format.DateTimeFormatter timeParser()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.weekDate()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="weekDate()" full-signature="org.joda.time.format.ISODateTimeFormat.weekDate()" throws="">public static org.joda.time.format.DateTimeFormatter weekDate()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.weekDateTime()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="weekDateTime()" full-signature="org.joda.time.format.ISODateTimeFormat.weekDateTime()" throws="">public static org.joda.time.format.DateTimeFormatter weekDateTime()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="weekDateTimeNoMillis()" full-signature="org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis()" throws="">public static org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.weekyear()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="weekyear()" full-signature="org.joda.time.format.ISODateTimeFormat.weekyear()" throws="">public static org.joda.time.format.DateTimeFormatter weekyear()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.weekyearWeek()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="weekyearWeek()" full-signature="org.joda.time.format.ISODateTimeFormat.weekyearWeek()" throws="">public static org.joda.time.format.DateTimeFormatter weekyearWeek()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.weekyearWeekDay()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="weekyearWeekDay()" full-signature="org.joda.time.format.ISODateTimeFormat.weekyearWeekDay()" throws="">public static org.joda.time.format.DateTimeFormatter weekyearWeekDay()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.year()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="year()" full-signature="org.joda.time.format.ISODateTimeFormat.year()" throws="">public static org.joda.time.format.DateTimeFormatter year()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.yearMonth()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="yearMonth()" full-signature="org.joda.time.format.ISODateTimeFormat.yearMonth()" throws="">public static org.joda.time.format.DateTimeFormatter yearMonth()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.ISODateTimeFormat.yearMonthDay()</name>
                    <modified-code visibility="public" static="yes" return-type="org.joda.time.format.DateTimeFormatter" signature="yearMonthDay()" full-signature="org.joda.time.format.ISODateTimeFormat.yearMonthDay()" throws="">public static org.joda.time.format.DateTimeFormatter yearMonthDay()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.format.PeriodFormatterBuilder</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.PeriodFormatterBuilder.toFormatter(java.util.List, boolean, boolean)</name>
                    <modified-code visibility="private" static="yes" return-type="org.joda.time.format.PeriodFormatter" signature="toFormatter(java.util.List, boolean, boolean)" full-signature="org.joda.time.format.PeriodFormatterBuilder.toFormatter(java.util.List, boolean, boolean)" throws="">private static org.joda.time.format.PeriodFormatter toFormatter(java.util.List, boolean, boolean)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.format.PeriodFormatterBuilder$FieldFormatter</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength(org.joda.time.ReadablePeriod, java.util.Locale)</name>
                    <modified-code visibility="public" return-type="int" signature="calculatePrintedLength(org.joda.time.ReadablePeriod, java.util.Locale)" full-signature="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength(org.joda.time.ReadablePeriod, java.util.Locale)" throws="">public int calculatePrintedLength(org.joda.time.ReadablePeriod, java.util.Locale)</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo(java.lang.StringBuffer, org.joda.time.ReadablePeriod, java.util.Locale)</name>
                    <modified-code visibility="public" return-type="void" signature="printTo(java.lang.StringBuffer, org.joda.time.ReadablePeriod, java.util.Locale)" full-signature="org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo(java.lang.StringBuffer, org.joda.time.ReadablePeriod, java.util.Locale)" throws="">public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePeriod, java.util.Locale)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.format.PeriodFormatterBuilder$Separator</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto(org.joda.time.ReadWritablePeriod, java.lang.String, int, java.util.Locale)</name>
                    <modified-code visibility="public" return-type="int" signature="parseInto(org.joda.time.ReadWritablePeriod, java.lang.String, int, java.util.Locale)" full-signature="org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto(org.joda.time.ReadWritablePeriod, java.lang.String, int, java.util.Locale)" throws="">public int parseInto(org.joda.time.ReadWritablePeriod, java.lang.String, int, java.util.Locale)</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="package" static="yes" synthetic="yes" return-type="org.joda.time.format.PeriodParser" signature="access$000(org.joda.time.format.PeriodFormatterBuilder$Separator)" full-signature="org.joda.time.format.PeriodFormatterBuilder$Separator.access$000(org.joda.time.format.PeriodFormatterBuilder$Separator)" throws="">static org.joda.time.format.PeriodParser access$000(org.joda.time.format.PeriodFormatterBuilder$Separator)</declaration>
                <declaration visibility="package" static="yes" synthetic="yes" return-type="org.joda.time.format.PeriodPrinter" signature="access$100(org.joda.time.format.PeriodFormatterBuilder$Separator)" full-signature="org.joda.time.format.PeriodFormatterBuilder$Separator.access$100(org.joda.time.format.PeriodFormatterBuilder$Separator)" throws="">static org.joda.time.format.PeriodPrinter access$100(org.joda.time.format.PeriodFormatterBuilder$Separator)</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.format.TestDateTimeFormat</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.TestDateTimeFormat.testFormatParse_textMonthAtEnd_France()</name>
                    <modified-code visibility="public" return-type="void" signature="testFormatParse_textMonthAtEnd_France()" full-signature="org.joda.time.format.TestDateTimeFormat.testFormatParse_textMonthAtEnd_France()" throws="">public void testFormatParse_textMonthAtEnd_France()</modified-code>
                </feature>
            </modified-methods>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testFormatParse_textMonthAtEnd_France_withSpecifiedDefault()" full-signature="org.joda.time.format.TestDateTimeFormat.testFormatParse_textMonthAtEnd_France_withSpecifiedDefault()" throws="">public void testFormatParse_textMonthAtEnd_France_withSpecifiedDefault()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.format.TestDateTimeFormatter</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_feb29()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29()" throws="">public void testParseInto_monthDay_feb29()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_feb29_OfYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_OfYear()" throws="">public void testParseInto_monthDay_feb29_OfYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_feb29_newYork()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_newYork()" throws="">public void testParseInto_monthDay_feb29_newYork()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_feb29_newYork_endOfYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_newYork_endOfYear()" throws="">public void testParseInto_monthDay_feb29_newYork_endOfYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_feb29_newYork_startOfYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_newYork_startOfYear()" throws="">public void testParseInto_monthDay_feb29_newYork_startOfYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_feb29_startOfYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_startOfYear()" throws="">public void testParseInto_monthDay_feb29_startOfYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_feb29_tokyo()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_tokyo()" throws="">public void testParseInto_monthDay_feb29_tokyo()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_feb29_tokyo_endOfYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_tokyo_endOfYear()" throws="">public void testParseInto_monthDay_feb29_tokyo_endOfYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_feb29_tokyo_startOfYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_feb29_tokyo_startOfYear()" throws="">public void testParseInto_monthDay_feb29_tokyo_startOfYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_withDefaultYear_feb29()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_withDefaultYear_feb29()" throws="">public void testParseInto_monthDay_withDefaultYear_feb29()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_withDefaultYear_feb29_newYork()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_withDefaultYear_feb29_newYork()" throws="">public void testParseInto_monthDay_withDefaultYear_feb29_newYork()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthDay_withDefaultYear_feb29_newYork_endOfYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthDay_withDefaultYear_feb29_newYork_endOfYear()" throws="">public void testParseInto_monthDay_withDefaultYear_feb29_newYork_endOfYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthOnly()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly()" throws="">public void testParseInto_monthOnly()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthOnly_baseEndYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_baseEndYear()" throws="">public void testParseInto_monthOnly_baseEndYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthOnly_baseStartYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_baseStartYear()" throws="">public void testParseInto_monthOnly_baseStartYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthOnly_parseEndYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_parseEndYear()" throws="">public void testParseInto_monthOnly_parseEndYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseInto_monthOnly_parseStartYear()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseInto_monthOnly_parseStartYear()" throws="">public void testParseInto_monthOnly_parseStartYear()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDateTime_monthDay_feb29()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDateTime_monthDay_feb29()" throws="">public void testParseLocalDateTime_monthDay_feb29()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDateTime_monthDay_withDefaultYear_feb29()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDateTime_monthDay_withDefaultYear_feb29()" throws="">public void testParseLocalDateTime_monthDay_withDefaultYear_feb29()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_monthDay_feb29()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_monthDay_feb29()" throws="">public void testParseLocalDate_monthDay_feb29()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_monthDay_withDefaultYear_feb29()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_monthDay_withDefaultYear_feb29()" throws="">public void testParseLocalDate_monthDay_withDefaultYear_feb29()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_weekyear_month_week_2010()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2010()" throws="">public void testParseLocalDate_weekyear_month_week_2010()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_weekyear_month_week_2011()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2011()" throws="">public void testParseLocalDate_weekyear_month_week_2011()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_weekyear_month_week_2012()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_weekyear_month_week_2012()" throws="">public void testParseLocalDate_weekyear_month_week_2012()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_yearOfCentury()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_yearOfCentury()" throws="">public void testParseLocalDate_yearOfCentury()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_yearOfEra()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_yearOfEra()" throws="">public void testParseLocalDate_yearOfEra()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_year_month_week_2010()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2010()" throws="">public void testParseLocalDate_year_month_week_2010()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_year_month_week_2011()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2011()" throws="">public void testParseLocalDate_year_month_week_2011()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_year_month_week_2012()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2012()" throws="">public void testParseLocalDate_year_month_week_2012()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_year_month_week_2013()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2013()" throws="">public void testParseLocalDate_year_month_week_2013()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_year_month_week_2014()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2014()" throws="">public void testParseLocalDate_year_month_week_2014()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_year_month_week_2015()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2015()" throws="">public void testParseLocalDate_year_month_week_2015()</declaration>
                <declaration visibility="public" return-type="void" signature="testParseLocalDate_year_month_week_2016()" full-signature="org.joda.time.format.TestDateTimeFormatter.testParseLocalDate_year_month_week_2016()" throws="">public void testParseLocalDate_year_month_week_2016()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.format.TestDateTimeFormatterBuilder</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.TestDateTimeFormatterBuilder.test_append_Printer()</name>
                    <modified-code visibility="public" return-type="void" signature="test_append_Printer()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_append_Printer()" throws="">public void test_append_Printer()</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.DateTimeZone" name="LONDON" signature="LONDON" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.LONDON">private static final org.joda.time.DateTimeZone LONDON</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.DateTimeZone" name="LOS_ANGELES" signature="LOS_ANGELES" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.LOS_ANGELES">private static final org.joda.time.DateTimeZone LOS_ANGELES</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.DateTimeZone" name="NEW_YORK" signature="NEW_YORK" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.NEW_YORK">private static final org.joda.time.DateTimeZone NEW_YORK</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.DateTimeZone" name="PARIS" signature="PARIS" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.PARIS">private static final org.joda.time.DateTimeZone PARIS</declaration>
                <declaration visibility="private" static="yes" final="yes" type="org.joda.time.DateTimeZone" name="TOKYO" signature="TOKYO" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.TOKYO">private static final org.joda.time.DateTimeZone TOKYO</declaration>
            </new-fields>
            <new-methods>
                <declaration visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.static {}" throws="">static {}</declaration>
                <declaration visibility="public" return-type="void" signature="test_appendOptional_Parser()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_appendOptional_Parser()" throws="">public void test_appendOptional_Parser()</declaration>
                <declaration visibility="public" return-type="void" signature="test_appendOptional_nullParser()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_appendOptional_nullParser()" throws="">public void test_appendOptional_nullParser()</declaration>
                <declaration visibility="public" return-type="void" signature="test_appendTimeZoneId()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_appendTimeZoneId()" throws="">public void test_appendTimeZoneId()</declaration>
                <declaration visibility="public" return-type="void" signature="test_append_Parser()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_append_Parser()" throws="">public void test_append_Parser()</declaration>
                <declaration visibility="public" return-type="void" signature="test_append_Printer_nullParser()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_append_Printer_nullParser()" throws="">public void test_append_Printer_nullParser()</declaration>
                <declaration visibility="public" return-type="void" signature="test_append_nullParser()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_append_nullParser()" throws="">public void test_append_nullParser()</declaration>
                <declaration visibility="public" return-type="void" signature="test_append_nullPrinter()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_append_nullPrinter()" throws="">public void test_append_nullPrinter()</declaration>
                <declaration visibility="public" return-type="void" signature="test_append_nullPrinter_Parser()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_append_nullPrinter_Parser()" throws="">public void test_append_nullPrinter_Parser()</declaration>
                <declaration visibility="public" return-type="void" signature="test_localParseWrongOffsetAndZone()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_localParseWrongOffsetAndZone()" throws="">public void test_localParseWrongOffsetAndZone()</declaration>
                <declaration visibility="public" return-type="void" signature="test_localPrintParseOffset()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_localPrintParseOffset()" throws="">public void test_localPrintParseOffset()</declaration>
                <declaration visibility="public" return-type="void" signature="test_localPrintParseOffsetAndZone()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_localPrintParseOffsetAndZone()" throws="">public void test_localPrintParseOffsetAndZone()</declaration>
                <declaration visibility="public" return-type="void" signature="test_localPrintParseZoneTokyo()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_localPrintParseZoneTokyo()" throws="">public void test_localPrintParseZoneTokyo()</declaration>
                <declaration visibility="public" return-type="void" signature="test_parseWrongOffset()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_parseWrongOffset()" throws="">public void test_parseWrongOffset()</declaration>
                <declaration visibility="public" return-type="void" signature="test_parseWrongOffsetAndZone()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_parseWrongOffsetAndZone()" throws="">public void test_parseWrongOffsetAndZone()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseLongName()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseLongName()" throws="">public void test_printParseLongName()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseLongNameWithLookup()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseLongNameWithLookup()" throws="">public void test_printParseLongNameWithLookup()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseOffset()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseOffset()" throws="">public void test_printParseOffset()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseOffsetAndZone()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseOffsetAndZone()" throws="">public void test_printParseOffsetAndZone()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseShortName()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseShortName()" throws="">public void test_printParseShortName()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseShortNameWithAutoLookup()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseShortNameWithAutoLookup()" throws="">public void test_printParseShortNameWithAutoLookup()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseShortNameWithLookup()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseShortNameWithLookup()" throws="">public void test_printParseShortNameWithLookup()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseZoneBahiaBanderas()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseZoneBahiaBanderas()" throws="">public void test_printParseZoneBahiaBanderas()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseZoneDawsonCreek()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseZoneDawsonCreek()" throws="">public void test_printParseZoneDawsonCreek()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseZoneParis()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseZoneParis()" throws="">public void test_printParseZoneParis()</declaration>
                <declaration visibility="public" return-type="void" signature="test_printParseZoneTokyo()" full-signature="org.joda.time.format.TestDateTimeFormatterBuilder.test_printParseZoneTokyo()" throws="">public void test_printParseZoneTokyo()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.format.TestISOPeriodFormat</name>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="testFormatStandard_negative()" full-signature="org.joda.time.format.TestISOPeriodFormat.testFormatStandard_negative()" throws="">public void testFormatStandard_negative()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.format.TestPeriodFormat</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.format.TestPeriodFormat.setUp()</name>
                    <modified-code visibility="protected" return-type="void" signature="setUp()" full-signature="org.joda.time.format.TestPeriodFormat.setUp()" throws="java.lang.Exception">protected void setUp() throws java.lang.Exception</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.TestPeriodFormat.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.format.TestPeriodFormat.static {}" throws="">static {}</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.TestPeriodFormat.test_wordBased_es_FormatOneField()</name>
                    <modified-code visibility="public" return-type="void" signature="test_wordBased_es_FormatOneField()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_es_FormatOneField()" throws="">public void test_wordBased_es_FormatOneField()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.TestPeriodFormat.test_wordBased_es_formatStandard()</name>
                    <modified-code visibility="public" return-type="void" signature="test_wordBased_es_formatStandard()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_es_formatStandard()" throws="">public void test_wordBased_es_formatStandard()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.TestPeriodFormat.test_wordBased_es_formatTwoFields()</name>
                    <modified-code visibility="public" return-type="void" signature="test_wordBased_es_formatTwoFields()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_es_formatTwoFields()" throws="">public void test_wordBased_es_formatTwoFields()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.TestPeriodFormat.test_wordBased_es_parseOneField()</name>
                    <modified-code visibility="public" return-type="void" signature="test_wordBased_es_parseOneField()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_es_parseOneField()" throws="">public void test_wordBased_es_parseOneField()</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.format.TestPeriodFormat.test_wordBased_es_parseTwoFields()</name>
                    <modified-code visibility="public" return-type="void" signature="test_wordBased_es_parseTwoFields()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_es_parseTwoFields()" throws="">public void test_wordBased_es_parseTwoFields()</modified-code>
                </feature>
            </modified-methods>
            <new-fields>
                <declaration visibility="private" static="yes" final="yes" type="java.util.Locale" name="DA" signature="DA" full-signature="org.joda.time.format.TestPeriodFormat.DA">private static final java.util.Locale DA</declaration>
                <declaration visibility="private" static="yes" final="yes" type="java.util.Locale" name="EN" signature="EN" full-signature="org.joda.time.format.TestPeriodFormat.EN">private static final java.util.Locale EN</declaration>
                <declaration visibility="private" static="yes" final="yes" type="java.util.Locale" name="JA" signature="JA" full-signature="org.joda.time.format.TestPeriodFormat.JA">private static final java.util.Locale JA</declaration>
            </new-fields>
            <new-methods>
                <declaration visibility="public" return-type="void" signature="test_getDefault_checkRedundantSeparator()" full-signature="org.joda.time.format.TestPeriodFormat.test_getDefault_checkRedundantSeparator()" throws="">public void test_getDefault_checkRedundantSeparator()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_da_cached()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_da_cached()" throws="">public void test_wordBased_da_cached()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_da_formatMultiple()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_da_formatMultiple()" throws="">public void test_wordBased_da_formatMultiple()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_da_formatSinglular()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_da_formatSinglular()" throws="">public void test_wordBased_da_formatSinglular()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_default()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_default()" throws="">public void test_wordBased_default()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_en_from_de()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_en_from_de()" throws="">public void test_wordBased_en_from_de()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_en_from_nl()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_en_from_nl()" throws="">public void test_wordBased_en_from_nl()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_fr_from_de()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_fr_from_de()" throws="">public void test_wordBased_fr_from_de()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_fr_from_nl()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_fr_from_nl()" throws="">public void test_wordBased_fr_from_nl()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_ja_cached()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_ja_cached()" throws="">public void test_wordBased_ja_cached()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_ja_checkRedundantSeparator()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_ja_checkRedundantSeparator()" throws="">public void test_wordBased_ja_checkRedundantSeparator()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_ja_formatMultiple()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_ja_formatMultiple()" throws="">public void test_wordBased_ja_formatMultiple()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_ja_formatSingular()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_ja_formatSingular()" throws="">public void test_wordBased_ja_formatSingular()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_ja_parseOneField()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_ja_parseOneField()" throws="">public void test_wordBased_ja_parseOneField()</declaration>
                <declaration visibility="public" return-type="void" signature="test_wordBased_ja_parseTwoFields()" full-signature="org.joda.time.format.TestPeriodFormat.test_wordBased_ja_parseTwoFields()" throws="">public void test_wordBased_ja_parseTwoFields()</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.tz.CachedDateTimeZone</name>
            <removed-methods>
                <declaration visibility="private" return-type="void" signature="readObject(java.io.ObjectInputStream)" full-signature="org.joda.time.tz.CachedDateTimeZone.readObject(java.io.ObjectInputStream)" throws="java.io.IOException, java.lang.ClassNotFoundException">private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException</declaration>
            </removed-methods>
            <modified-fields>
                <feature>
                    <name>org.joda.time.tz.CachedDateTimeZone.iInfoCache</name>
                    <modified-declaration>
                        <old-declaration visibility="private" transient="yes" type="org.joda.time.tz.CachedDateTimeZone$Info[]" name="iInfoCache" signature="iInfoCache" full-signature="org.joda.time.tz.CachedDateTimeZone.iInfoCache">private transient org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache</old-declaration>
                        <new-declaration visibility="private" final="yes" transient="yes" type="org.joda.time.tz.CachedDateTimeZone$Info[]" name="iInfoCache" signature="iInfoCache" full-signature="org.joda.time.tz.CachedDateTimeZone.iInfoCache">private final transient org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache</new-declaration>
                    </modified-declaration>
                </feature>
            </modified-fields>
            <modified-constructors>
                <feature>
                    <name>org.joda.time.tz.CachedDateTimeZone.CachedDateTimeZone(org.joda.time.DateTimeZone)</name>
                    <modified-code visibility="private" signature="CachedDateTimeZone(org.joda.time.DateTimeZone)" full-signature="org.joda.time.tz.CachedDateTimeZone.CachedDateTimeZone(org.joda.time.DateTimeZone)" throws="">private CachedDateTimeZone(org.joda.time.DateTimeZone)</modified-code>
                </feature>
            </modified-constructors>
        </class>
        <class>
            <name>org.joda.time.tz.DateTimeZoneBuilder</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.tz.DateTimeZoneBuilder.addCutover(int, char, int, int, int, boolean, int)</name>
                    <modified-code visibility="public" return-type="org.joda.time.tz.DateTimeZoneBuilder" signature="addCutover(int, char, int, int, int, boolean, int)" full-signature="org.joda.time.tz.DateTimeZoneBuilder.addCutover(int, char, int, int, int, boolean, int)" throws="">public org.joda.time.tz.DateTimeZoneBuilder addCutover(int, char, int, int, int, boolean, int)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.tz.DefaultNameProvider</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.tz.DefaultNameProvider.getNameSet(java.util.Locale, java.lang.String, java.lang.String)</name>
                    <modified-code visibility="private" synchronized="yes" return-type="java.lang.String[]" signature="getNameSet(java.util.Locale, java.lang.String, java.lang.String)" full-signature="org.joda.time.tz.DefaultNameProvider.getNameSet(java.util.Locale, java.lang.String, java.lang.String)" throws="">private synchronized java.lang.String[] getNameSet(java.util.Locale, java.lang.String, java.lang.String)</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.tz.TestAll</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.tz.TestAll.suite()</name>
                    <modified-code visibility="public" static="yes" return-type="junit.framework.Test" signature="suite()" full-signature="org.joda.time.tz.TestAll.suite()" throws="">public static junit.framework.Test suite()</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.tz.TestCompiler</name>
            <new-methods>
                <declaration visibility="package" static="yes" synthetic="yes" return-type="org.joda.time.tz.DateTimeZoneBuilder" signature="access$000(org.joda.time.tz.TestCompiler)" full-signature="org.joda.time.tz.TestCompiler.access$000(org.joda.time.tz.TestCompiler)" throws="">static org.joda.time.tz.DateTimeZoneBuilder access$000(org.joda.time.tz.TestCompiler)</declaration>
                <declaration visibility="private" return-type="org.joda.time.tz.DateTimeZoneBuilder" signature="getTestDataTimeZoneBuilder()" full-signature="org.joda.time.tz.TestCompiler.getTestDataTimeZoneBuilder()" throws="">private org.joda.time.tz.DateTimeZoneBuilder getTestDataTimeZoneBuilder()</declaration>
                <declaration visibility="public" return-type="void" signature="testDateTimeZoneBuilder()" full-signature="org.joda.time.tz.TestCompiler.testDateTimeZoneBuilder()" throws="java.lang.Exception">public void testDateTimeZoneBuilder() throws java.lang.Exception</declaration>
            </new-methods>
        </class>
        <class>
            <name>org.joda.time.tz.ZoneInfoCompiler</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.tz.ZoneInfoCompiler.compile(java.io.File, java.io.File[])</name>
                    <modified-code visibility="public" return-type="java.util.Map" signature="compile(java.io.File, java.io.File[])" full-signature="org.joda.time.tz.ZoneInfoCompiler.compile(java.io.File, java.io.File[])" throws="java.io.IOException">public java.util.Map compile(java.io.File, java.io.File[]) throws java.io.IOException</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.tz.ZoneInfoCompiler.static {}</name>
                    <modified-code visibility="package" static="yes" signature="static {}" full-signature="org.joda.time.tz.ZoneInfoCompiler.static {}" throws="">static {}</modified-code>
                </feature>
            </modified-methods>
        </class>
        <class>
            <name>org.joda.time.tz.ZoneInfoProvider</name>
            <modified-methods>
                <feature>
                    <name>org.joda.time.tz.ZoneInfoProvider.openResource(java.lang.String)</name>
                    <modified-code visibility="private" return-type="java.io.InputStream" signature="openResource(java.lang.String)" full-signature="org.joda.time.tz.ZoneInfoProvider.openResource(java.lang.String)" throws="java.io.IOException">private java.io.InputStream openResource(java.lang.String) throws java.io.IOException</modified-code>
                </feature>
                <feature>
                    <name>org.joda.time.tz.ZoneInfoProvider.uncaughtException(java.lang.Exception)</name>
                    <modified-code visibility="protected" return-type="void" signature="uncaughtException(java.lang.Exception)" full-signature="org.joda.time.tz.ZoneInfoProvider.uncaughtException(java.lang.Exception)" throws="">protected void uncaughtException(java.lang.Exception)</modified-code>
                </feature>
            </modified-methods>
        </class>
    </modified-classes>
    <new-classes>
        <name visibility="public" super="yes" name="org.joda.time.IllegalInstantException" extends="java.lang.IllegalArgumentException" implements="">org.joda.time.IllegalInstantException</name>
        <name visibility="public" super="yes" name="org.joda.time.TestStringConvert" extends="junit.framework.TestCase" implements="">org.joda.time.TestStringConvert</name>
        <name visibility="package" final="yes" super="yes" name="org.joda.time.base.BasePeriod$1" extends="org.joda.time.base.AbstractPeriod" implements="">org.joda.time.base.BasePeriod$1</name>
        <name visibility="public" super="yes" name="org.joda.time.chrono.TestGJDate" extends="junit.framework.TestCase" implements="">org.joda.time.chrono.TestGJDate</name>
        <name visibility="package" final="yes" super="yes" name="org.joda.time.format.DateTimeFormat$1" extends="java.util.LinkedHashMap" implements="">org.joda.time.format.DateTimeFormat$1</name>
        <name visibility="package" final="yes" super="yes" name="org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId" extends="java.lang.Enum" implements="org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser">org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId</name>
        <name visibility="package" final="yes" super="yes" name="org.joda.time.format.ISODateTimeFormat$Constants" extends="java.lang.Object" implements="">org.joda.time.format.ISODateTimeFormat$Constants</name>
        <name visibility="public" super="yes" name="org.joda.time.tz.TestCachedDateTimeZone" extends="junit.framework.TestCase" implements="">org.joda.time.tz.TestCachedDateTimeZone</name>
        <name visibility="package" super="yes" name="org.joda.time.tz.TestCompiler$1" extends="java.lang.Object" implements="java.lang.Runnable">org.joda.time.tz.TestCompiler$1</name>
        <name visibility="package" final="yes" super="yes" name="org.joda.time.tz.ZoneInfoCompiler$1" extends="java.lang.ThreadLocal" implements="">org.joda.time.tz.ZoneInfoCompiler$1</name>
    </new-classes>
</differences>
